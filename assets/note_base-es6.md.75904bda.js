import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.419948d5.js";const B=JSON.parse('{"title":"JavaScript ES6","description":"远美网是一个vite与vitepress搭建的静态站点，记录着工作中有意义的事情，提供技术支持。","frontmatter":{"title":"JavaScript ES6","editLink":true,"head":[["meta",{"name":"description","content":"远美网是一个vite与vitepress搭建的静态站点，记录着工作中有意义的事情，提供技术支持。"}],["meta",{"name":"keywords","content":"JavaScript,ES6,let,const,变量,对象"}]]},"headers":[],"relativePath":"note/base-es6.md","filePath":"note/base-es6.md"}'),p={name:"note/base-es6.md"},o=l(`<p><strong>前言：</strong> 时代不断向前，时刻要跟上步伐，要不断保持学习。最新开始做新项目，基于前端工程化用到很多新知识，比如ES6；因此趁机学习补齐短板。</p><h3 id="let-const定义变量" tabindex="-1">let, const定义变量 <a class="header-anchor" href="#let-const定义变量" aria-label="Permalink to &quot;let, const定义变量&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">存在变量声明</span><span style="color:#E1E4E8;">; </span><span style="color:#B392F0;">声明的变量会给window增加属性（全局作用域下）</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">只会提前声明,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">即声明又定义</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(a,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">fn</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(window.a</span><span style="color:#E1E4E8;">) //2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//没有变量提升</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//不可以重复声明</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//不会给window增加属性</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(a</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//</span><span style="color:#B392F0;">&#39;a&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">has</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">already</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">been</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">declared</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(window.a</span><span style="color:#E1E4E8;">) //undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//没有变量提升</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//不可以重复声明</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//不会给window增加属性</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//定义变量一旦声明必须赋值</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//定义的是一个常量（不可以重新赋值）</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">块级作用域</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">//在fn</span><span style="color:#E1E4E8;">{} </span><span style="color:#9ECBFF;">for{}</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">if{}</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">obj{}情况下,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">一个{}就是一个块级作用域</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">//在块级作用域下,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">和fn声明的变量依然是全局的</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">//在块级作用域下,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">let和const声明的变量是私有的</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{}</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">想表示一个对象,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">不可以放在行首</span></span>
<span class="line"><span style="color:#E1E4E8;">		{</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">() {}</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">b</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">console.log(a</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//0</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">console.log(b</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">b</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">not</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">undefined</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;">{name:</span><span style="color:#B392F0;">&#39;sunny&#39;</span><span style="color:#B392F0;">}</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">看成一个块级作用域</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">//转变</span><span style="color:#E1E4E8;"> ({name:&#39;sunny&#39;}) </span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">console.log(eval(</span><span style="color:#B392F0;">&#39;({name:&#39;</span><span style="color:#B392F0;">sunny</span><span style="color:#B392F0;">&#39;})&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">//if</span><span style="color:#E1E4E8;">(){} 中的fn只会提前声明不会定义, 当条件成立先给函数赋值, 代码再执行</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">console.log(a</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">console.log(fn</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">		if(</span><span style="color:#B392F0;">1或0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">console.log(fn</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">() {}</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">for</span><span style="color:#E1E4E8;">() {} 点击li获取索引</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">var</span><span style="color:#24292E;"> </span><span style="color:#032F62;">fn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">存在变量声明</span><span style="color:#24292E;">; </span><span style="color:#6F42C1;">声明的变量会给window增加属性（全局作用域下）</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">var</span><span style="color:#24292E;"> </span><span style="color:#032F62;">只会提前声明,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">fn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">即声明又定义</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(a,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">fn</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">var</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">var</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(window.a</span><span style="color:#24292E;">) //2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//没有变量提升</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//不可以重复声明</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//不会给window增加属性</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(a</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//</span><span style="color:#6F42C1;">&#39;a&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">has</span><span style="color:#24292E;"> </span><span style="color:#032F62;">already</span><span style="color:#24292E;"> </span><span style="color:#032F62;">been</span><span style="color:#24292E;"> </span><span style="color:#032F62;">declared</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(window.a</span><span style="color:#24292E;">) //undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//没有变量提升</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//不可以重复声明</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//不会给window增加属性</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//定义变量一旦声明必须赋值</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//定义的是一个常量（不可以重新赋值）</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">const</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">块级作用域</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">//在fn</span><span style="color:#24292E;">{} </span><span style="color:#032F62;">for{}</span><span style="color:#24292E;"> </span><span style="color:#032F62;">if{}</span><span style="color:#24292E;"> </span><span style="color:#032F62;">obj{}情况下,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">一个{}就是一个块级作用域</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">//在块级作用域下,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">var</span><span style="color:#24292E;"> </span><span style="color:#032F62;">和fn声明的变量依然是全局的</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">//在块级作用域下,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">let和const声明的变量是私有的</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{}</span><span style="color:#24292E;"> </span><span style="color:#032F62;">想表示一个对象,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">不可以放在行首</span></span>
<span class="line"><span style="color:#24292E;">		{</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">var</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">b</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">console.log(a</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//0</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">console.log(b</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">b</span><span style="color:#24292E;"> </span><span style="color:#032F62;">not</span><span style="color:#24292E;"> </span><span style="color:#032F62;">undefined</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">//</span><span style="color:#24292E;">{name:</span><span style="color:#6F42C1;">&#39;sunny&#39;</span><span style="color:#6F42C1;">}</span><span style="color:#24292E;"> </span><span style="color:#032F62;">看成一个块级作用域</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">//转变</span><span style="color:#24292E;"> ({name:&#39;sunny&#39;}) </span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">console.log(eval(</span><span style="color:#6F42C1;">&#39;({name:&#39;</span><span style="color:#6F42C1;">sunny</span><span style="color:#6F42C1;">&#39;})&#39;</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">//if</span><span style="color:#24292E;">(){} 中的fn只会提前声明不会定义, 当条件成立先给函数赋值, 代码再执行</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">console.log(a</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">console.log(fn</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">		if(</span><span style="color:#6F42C1;">1或0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">console.log(fn</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">var</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">for</span><span style="color:#24292E;">() {} 点击li获取索引</span></span></code></pre></div><h3 id="结构赋值" tabindex="-1">结构赋值 <a class="header-anchor" href="#结构赋值" aria-label="Permalink to &quot;结构赋值&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">arr</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> [1, </span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#9ECBFF;">]</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">x</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">arr[</span><span style="color:#79B8FF;">0</span><span style="color:#9ECBFF;">]</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">y</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">arr[</span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">]</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">z</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">arr[</span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">]</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;">[x, </span><span style="color:#9ECBFF;">y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">z,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">m]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">arr</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(x,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">z</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//设置默认值</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">只有后面结构的值是undefined时候才会走默认值</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;">[x, </span><span style="color:#9ECBFF;">y=</span><span style="color:#79B8FF;">10</span><span style="color:#9ECBFF;">]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> [1, </span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">]</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(x,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">y</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//1</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;">[x, </span><span style="color:#9ECBFF;">y=</span><span style="color:#79B8FF;">10</span><span style="color:#9ECBFF;">]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> [1];</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(x,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">y</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//1</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//省略赋值</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> [ </span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">z]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> [1, </span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">]</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(z</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//3</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//不定参数</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">将后面的项放在一个数组中赋值给y3</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> [x, </span><span style="color:#9ECBFF;">y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">...y3]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> [1, </span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#9ECBFF;">]</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(y3</span><span style="color:#E1E4E8;">);</span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> [3, </span><span style="color:#79B8FF;">4</span><span style="color:#9ECBFF;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//对象的结构赋值</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//如果变量名和属性名一样,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">可以直接省略写法</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{name}</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{name:&#39;sunny&#39;}</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(name</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//对象设置默认值</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{name,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">age:18}</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{name:&#39;sunny&#39;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">age:undefined}</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(name,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">age</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sunny</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">18</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//嵌套</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{name,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">age:18,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">list}</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{name:&#39;sunny&#39;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">age:undefined,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">list:[&#39;js&#39;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vue&#39;]}</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(name.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">age,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">x1,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">x2</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//sunny</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">js</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">vue</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">x,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">y</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	[x, y] = [1, </span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">]</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(x,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">y</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//1</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">	({x, y} = {x:1, y:2});</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(x,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">y</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//1</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//使用数组结构赋值,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">如果等号右边不是一个数组,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">默认将其转化为类数组</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;">[x, </span><span style="color:#9ECBFF;">y]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;123&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(x,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">y</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//1</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//使用对象结构赋值,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">如果等号右边右边不是一个对象,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">默认将其转化为对象</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{a}</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(a</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//undefined</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(Object(a</span><span style="color:#E1E4E8;">)); </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;">{__proto__:}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{length:a}</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;123&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(Object(</span><span style="color:#B392F0;">&#39;123&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(a</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">函数结构赋值</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">([x, y, ...z]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">console.log(x,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">z</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//1,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> [3, </span><span style="color:#79B8FF;">4</span><span style="color:#9ECBFF;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">fn(1,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">({name=&#39;cherry&#39;, age=18}) {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">console.log(name,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">age</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//sunny</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">18</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">fn(</span><span style="color:#E1E4E8;">{name:</span><span style="color:#B392F0;">&#39;sunny&#39;</span><span style="color:#B392F0;">}</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">({name=&#39;cherry&#39;, age=18}={}) {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">console.log(name,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">age</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">();</span><span style="color:#B392F0;">//sunny</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">18</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">fn(</span><span style="color:#E1E4E8;">{});</span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sunny</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">18</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">({name, age}={name:&#39;sunny&#39;, age:18}) {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">console.log(name,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">age</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(); </span><span style="color:#B392F0;">//sunny</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">18</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">fn(</span><span style="color:#E1E4E8;">{});</span><span style="color:#B392F0;">//undefined</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">undefined</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arr</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> [1, </span><span style="color:#005CC5;">2</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#032F62;">]</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">x</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arr[</span><span style="color:#005CC5;">0</span><span style="color:#032F62;">]</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">y</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arr[</span><span style="color:#005CC5;">1</span><span style="color:#032F62;">]</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">z</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arr[</span><span style="color:#005CC5;">3</span><span style="color:#032F62;">]</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;">[x, </span><span style="color:#032F62;">y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">z,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">m]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arr</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(x,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">z</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//设置默认值</span><span style="color:#24292E;"> </span><span style="color:#032F62;">只有后面结构的值是undefined时候才会走默认值</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;">[x, </span><span style="color:#032F62;">y=</span><span style="color:#005CC5;">10</span><span style="color:#032F62;">]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> [1, </span><span style="color:#005CC5;">2</span><span style="color:#032F62;">]</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(x,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">y</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;">[x, </span><span style="color:#032F62;">y=</span><span style="color:#005CC5;">10</span><span style="color:#032F62;">]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> [1];</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(x,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">y</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//省略赋值</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> [ </span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">z]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> [1, </span><span style="color:#005CC5;">2</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">]</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(z</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//3</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//不定参数</span><span style="color:#24292E;"> </span><span style="color:#032F62;">将后面的项放在一个数组中赋值给y3</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> [x, </span><span style="color:#032F62;">y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">...y3]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> [1, </span><span style="color:#005CC5;">2</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#032F62;">]</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(y3</span><span style="color:#24292E;">);</span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> [3, </span><span style="color:#005CC5;">4</span><span style="color:#032F62;">]</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//对象的结构赋值</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//如果变量名和属性名一样,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">可以直接省略写法</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{name}</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{name:&#39;sunny&#39;}</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(name</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//对象设置默认值</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{name,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">age:18}</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{name:&#39;sunny&#39;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">age:undefined}</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(name,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">age</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sunny</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">18</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//嵌套</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{name,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">age:18,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list}</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{name:&#39;sunny&#39;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">age:undefined,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list:[&#39;js&#39;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue&#39;]}</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(name.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">age,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">x1,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">x2</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//sunny</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">18</span><span style="color:#24292E;"> </span><span style="color:#032F62;">js</span><span style="color:#24292E;"> </span><span style="color:#032F62;">vue</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">x,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">y</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	[x, y] = [1, </span><span style="color:#005CC5;">2</span><span style="color:#032F62;">]</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(x,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">y</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">	({x, y} = {x:1, y:2});</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(x,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">y</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//使用数组结构赋值,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">如果等号右边不是一个数组,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">默认将其转化为类数组</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;">[x, </span><span style="color:#032F62;">y]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;123&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(x,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">y</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//使用对象结构赋值,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">如果等号右边右边不是一个对象,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">默认将其转化为对象</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{a}</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(a</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//undefined</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(Object(a</span><span style="color:#24292E;">)); </span><span style="color:#6F42C1;">//</span><span style="color:#24292E;">{__proto__:}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{length:a}</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;123&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(Object(</span><span style="color:#6F42C1;">&#39;123&#39;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(a</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">函数结构赋值</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">([x, y, ...z]) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">console.log(x,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">z</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//1,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> [3, </span><span style="color:#005CC5;">4</span><span style="color:#032F62;">]</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">fn(1,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">({name=&#39;cherry&#39;, age=18}) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">console.log(name,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">age</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//sunny</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">18</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">fn(</span><span style="color:#24292E;">{name:</span><span style="color:#6F42C1;">&#39;sunny&#39;</span><span style="color:#6F42C1;">}</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">({name=&#39;cherry&#39;, age=18}={}) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">console.log(name,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">age</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">();</span><span style="color:#6F42C1;">//sunny</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">18</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">fn(</span><span style="color:#24292E;">{});</span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sunny</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">18</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">({name, age}={name:&#39;sunny&#39;, age:18}) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">console.log(name,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">age</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(); </span><span style="color:#6F42C1;">//sunny</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">18</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">fn(</span><span style="color:#24292E;">{});</span><span style="color:#6F42C1;">//undefined</span><span style="color:#24292E;"> </span><span style="color:#032F62;">undefined</span></span></code></pre></div><h3 id="字符串的扩展" tabindex="-1">字符串的扩展 <a class="header-anchor" href="#字符串的扩展" aria-label="Permalink to &quot;字符串的扩展&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">console.log(String.prototype</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">返回值布尔</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//片段字符串中有没有指定字符</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//includes(指定字符,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">开始查找的位置</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">可选</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//参数2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">如果不是数字默认会转化为数字</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Number方法转化</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;abc123&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(str.includes(</span><span style="color:#B392F0;">&#39;a&#39;</span><span style="color:#E1E4E8;">)); </span><span style="color:#B392F0;">//true</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(str.includes(</span><span style="color:#B392F0;">&#39;a&#39;</span><span style="color:#B392F0;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)); </span><span style="color:#B392F0;">//false</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(str.includes(</span><span style="color:#B392F0;">&#39;a&#39;</span><span style="color:#B392F0;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">null</span><span style="color:#E1E4E8;">)); </span><span style="color:#B392F0;">//true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//startsWith</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">endsWith</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//startsWith</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">判断字符串是不是以指定字符作为开头</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//语法：startsWith(</span><span style="color:#B392F0;">&#39;指定字符&#39;</span><span style="color:#B392F0;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">开始查找的位置</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">可选</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(str.startsWith(</span><span style="color:#B392F0;">&#39;a&#39;</span><span style="color:#E1E4E8;">)); </span><span style="color:#B392F0;">//true</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//endsWith</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">判断字符串是不是以指定字符作为结尾</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//语法：</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">endsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">&#39;指定字符&#39;</span><span style="color:#B392F0;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">n</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">n：从前n个中查看</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(str.startsWith(</span><span style="color:#B392F0;">&#39;c&#39;</span><span style="color:#B392F0;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)); </span><span style="color:#B392F0;">//true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//repeat(n</span><span style="color:#E1E4E8;">) 将字符串重复n次; </span><span style="color:#B392F0;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">取整</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">不可以是负数</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Infinity</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//0到-1,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">取整0</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;123&#39;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(str.repeat(2</span><span style="color:#E1E4E8;">)); </span><span style="color:#B392F0;">//123123</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//padStart</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">padEnd</span><span style="color:#E1E4E8;">; </span><span style="color:#B392F0;">按照指定字符补全字符串的指定长度</span><span style="color:#E1E4E8;"> (es7方法)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//参数1：长度lenght,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">参数2：指定字符</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//语法：</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">padStart/padEnd</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">length,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;指定字符&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;ab&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(str.padStart(4,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;jj&#39;</span><span style="color:#E1E4E8;">)); </span><span style="color:#B392F0;">//jab</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(str.padStart(5,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;cdef&#39;</span><span style="color:#E1E4E8;">)); </span><span style="color:#B392F0;">//cdeab</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">console.log(String.prototype</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">返回值布尔</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//片段字符串中有没有指定字符</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//includes(指定字符,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">开始查找的位置</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">可选</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//参数2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">如果不是数字默认会转化为数字</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Number方法转化</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">str</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;abc123&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(str.includes(</span><span style="color:#6F42C1;">&#39;a&#39;</span><span style="color:#24292E;">)); </span><span style="color:#6F42C1;">//true</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(str.includes(</span><span style="color:#6F42C1;">&#39;a&#39;</span><span style="color:#6F42C1;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)); </span><span style="color:#6F42C1;">//false</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(str.includes(</span><span style="color:#6F42C1;">&#39;a&#39;</span><span style="color:#6F42C1;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">null</span><span style="color:#24292E;">)); </span><span style="color:#6F42C1;">//true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//startsWith</span><span style="color:#24292E;"> </span><span style="color:#032F62;">endsWith</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//startsWith</span><span style="color:#24292E;"> </span><span style="color:#032F62;">判断字符串是不是以指定字符作为开头</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//语法：startsWith(</span><span style="color:#6F42C1;">&#39;指定字符&#39;</span><span style="color:#6F42C1;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">开始查找的位置</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">可选</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(str.startsWith(</span><span style="color:#6F42C1;">&#39;a&#39;</span><span style="color:#24292E;">)); </span><span style="color:#6F42C1;">//true</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//endsWith</span><span style="color:#24292E;"> </span><span style="color:#032F62;">判断字符串是不是以指定字符作为结尾</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//语法：</span><span style="color:#24292E;"> </span><span style="color:#032F62;">endsWith</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">&#39;指定字符&#39;</span><span style="color:#6F42C1;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">n</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">n：从前n个中查看</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(str.startsWith(</span><span style="color:#6F42C1;">&#39;c&#39;</span><span style="color:#6F42C1;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)); </span><span style="color:#6F42C1;">//true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//repeat(n</span><span style="color:#24292E;">) 将字符串重复n次; </span><span style="color:#6F42C1;">n</span><span style="color:#24292E;"> </span><span style="color:#032F62;">取整</span><span style="color:#24292E;"> </span><span style="color:#032F62;">不可以是负数</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Infinity</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//0到-1,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">取整0</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">str</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;123&#39;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(str.repeat(2</span><span style="color:#24292E;">)); </span><span style="color:#6F42C1;">//123123</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//padStart</span><span style="color:#24292E;"> </span><span style="color:#032F62;">padEnd</span><span style="color:#24292E;">; </span><span style="color:#6F42C1;">按照指定字符补全字符串的指定长度</span><span style="color:#24292E;"> (es7方法)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//参数1：长度lenght,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">参数2：指定字符</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//语法：</span><span style="color:#24292E;"> </span><span style="color:#032F62;">padStart/padEnd</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">length,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;指定字符&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">str</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;ab&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(str.padStart(4,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;jj&#39;</span><span style="color:#24292E;">)); </span><span style="color:#6F42C1;">//jab</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(str.padStart(5,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;cdef&#39;</span><span style="color:#24292E;">)); </span><span style="color:#6F42C1;">//cdeab</span></span></code></pre></div><h3 id="模版字符串" tabindex="-1">模版字符串 <a class="header-anchor" href="#模版字符串" aria-label="Permalink to &quot;模版字符串&quot;">​</a></h3><pre><code>let name = &#39;sunny&#39;;
document.body.innerHTML = \`&lt;div&gt;\${name}&lt;/div&gt;\`;
</code></pre><h3 id="array类上的扩展" tabindex="-1">Array类上的扩展 <a class="header-anchor" href="#array类上的扩展" aria-label="Permalink to &quot;Array类上的扩展&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">console.dir(Array</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//Array</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">类,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">是一个函数</span><span style="color:#E1E4E8;">; </span><span style="color:#B392F0;">返回一个数组</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//Array(x,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">y</span><span style="color:#E1E4E8;">) 将参数变成一个数组返回 [x, y];</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//只有一个参数并且参数是个数字,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">返回一个有n个空位的数组</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(Array(</span><span style="color:#B392F0;">&#39;3&#39;</span><span style="color:#E1E4E8;">)); </span><span style="color:#B392F0;">//[</span><span style="color:#B392F0;">&#39;3&#39;</span><span style="color:#B392F0;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(Array(3</span><span style="color:#E1E4E8;">)); </span><span style="color:#B392F0;">//[empty</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">x</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//Array.of</span><span style="color:#E1E4E8;">() 跟Array一样, 唯一不同是： 参数是一个数字的时候返回是一个只有一项的数组</span></span>
<span class="line"><span style="color:#E1E4E8;">	console.log(</span><span style="color:#B392F0;">Array.of(3</span><span style="color:#E1E4E8;">)); </span><span style="color:#B392F0;">//[3]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//Array.from</span><span style="color:#E1E4E8;">() 返回一个数组; 参数是 数组或类数组</span></span>
<span class="line"><span style="color:#E1E4E8;">	console.log(</span><span style="color:#B392F0;">Array.from([123]</span><span style="color:#E1E4E8;">)); </span><span style="color:#B392F0;">//[123]</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(Array.from(</span><span style="color:#B392F0;">&#39;123&#39;</span><span style="color:#E1E4E8;">)); </span><span style="color:#B392F0;">//[</span><span style="color:#B392F0;">&#39;1&#39;</span><span style="color:#B392F0;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;2&#39;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;3&#39;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">console.dir(Array</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//Array</span><span style="color:#24292E;"> </span><span style="color:#032F62;">类,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">是一个函数</span><span style="color:#24292E;">; </span><span style="color:#6F42C1;">返回一个数组</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//Array(x,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">y</span><span style="color:#24292E;">) 将参数变成一个数组返回 [x, y];</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//只有一个参数并且参数是个数字,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">返回一个有n个空位的数组</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(Array(</span><span style="color:#6F42C1;">&#39;3&#39;</span><span style="color:#24292E;">)); </span><span style="color:#6F42C1;">//[</span><span style="color:#6F42C1;">&#39;3&#39;</span><span style="color:#6F42C1;">]</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(Array(3</span><span style="color:#24292E;">)); </span><span style="color:#6F42C1;">//[empty</span><span style="color:#24292E;"> </span><span style="color:#032F62;">x</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//Array.of</span><span style="color:#24292E;">() 跟Array一样, 唯一不同是： 参数是一个数字的时候返回是一个只有一项的数组</span></span>
<span class="line"><span style="color:#24292E;">	console.log(</span><span style="color:#6F42C1;">Array.of(3</span><span style="color:#24292E;">)); </span><span style="color:#6F42C1;">//[3]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//Array.from</span><span style="color:#24292E;">() 返回一个数组; 参数是 数组或类数组</span></span>
<span class="line"><span style="color:#24292E;">	console.log(</span><span style="color:#6F42C1;">Array.from([123]</span><span style="color:#24292E;">)); </span><span style="color:#6F42C1;">//[123]</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(Array.from(</span><span style="color:#6F42C1;">&#39;123&#39;</span><span style="color:#24292E;">)); </span><span style="color:#6F42C1;">//[</span><span style="color:#6F42C1;">&#39;1&#39;</span><span style="color:#6F42C1;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;2&#39;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;3&#39;]</span></span></code></pre></div><p>数组原型上的扩展方法 (所有数组实例方法 参数从索引n到索引m, 包n不包m)</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">console.log(Array.prototype</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//copyWithin</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">从原数组中读取内容,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">替换数组的指定位置的内容</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//参数(替换的目标起始位置,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">查找的起始位置,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">查找的结束位置/默认到结尾</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//原数组length不变,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">如果有超出部分截取掉</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">arr</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> [1, </span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">7</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span><span style="color:#9ECBFF;">]</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(arr.copyWithin(4,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">)); </span><span style="color:#B392F0;">//[1,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">7</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span><span style="color:#9ECBFF;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(arr.copyWithin(3,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)); </span><span style="color:#B392F0;">//[1,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">7</span><span style="color:#9ECBFF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//includes</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">判断数组中有没有某一项,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">参数2是开始查找的位置</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log([1,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">].include</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">1</span><span style="color:#E1E4E8;">)); </span><span style="color:#B392F0;">//true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">arr</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> [1, </span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#9ECBFF;">]</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//遍历数组的方法,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">参数是一个函数,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">自己函数中的this是window</span><span style="color:#E1E4E8;">; </span><span style="color:#B392F0;">改变this指向,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">可以通过第二个参数改变函数中的this</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//reduce,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">reduceRight不可以改变this,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">第二参数给初始值赋值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//fill</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">按照指定字符填充数组的指定位置</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">会改变原数组</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//将数组的每一项都变成指定字符</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(arr.fill(</span><span style="color:#B392F0;">&#39;sunny&#39;</span><span style="color:#E1E4E8;">)); </span><span style="color:#B392F0;">//[</span><span style="color:#B392F0;">&#39;sunny&#39;</span><span style="color:#B392F0;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;sunny&#39;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;sunny&#39;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;sunny&#39;]</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(arr.fill(</span><span style="color:#B392F0;">&#39;sunny&#39;</span><span style="color:#B392F0;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)); </span><span style="color:#B392F0;">//[1,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">,&#39;sunny&#39;,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#9ECBFF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//filter</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">遍历数组,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">根据返回值去过滤原数组（原数组不变）</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">es5</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">arr</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;sunny&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;sunny&#39;]</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">newArr</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">arr.filter</span><span style="color:#E1E4E8;">(function(</span><span style="color:#B392F0;">item,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">index</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">//如果返回true留下当前项,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">返回false不留下当前项</span><span style="color:#E1E4E8;">;  </span><span style="color:#B392F0;">结果返回一个新数组</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">//return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">//return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">typeof</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">item</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;number&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	})</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(newArr</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//[1,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//find</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">先遍历数组,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">一旦参数函数返回true,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">停止查找</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">返回当前项</span><span style="color:#E1E4E8;"> (es6)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//只会查找一个</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">num</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">arr.find</span><span style="color:#E1E4E8;">(function(</span><span style="color:#B392F0;">item</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">typeof</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">item</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;number&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	})</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(num</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//findIndex</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">先遍历数组,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">一旦参数函数返回true,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">停止查找</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">返回当前索引</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//只会查找一个</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">index</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">arr.find</span><span style="color:#E1E4E8;">(function(</span><span style="color:#B392F0;">item</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">typeof</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">item</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;string&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	})</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(index</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//every</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">遍历数组,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">如果遍历每一项都返回true,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">最后结果为true</span><span style="color:#E1E4E8;">; </span><span style="color:#B392F0;">只要有一个为false,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">结果为false</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">num</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> [1, </span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">].every</span><span style="color:#E1E4E8;">(function(</span><span style="color:#B392F0;">item</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">item</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;number&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">	});</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(num</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">num</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> [1, </span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;sunny&#39;].every</span><span style="color:#E1E4E8;">(function(</span><span style="color:#B392F0;">item</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">item</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;number&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">	});</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(num</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//some</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">遍历数组,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">只要有一项都是true,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">结果为true</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">num</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> [1, </span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;sunny&#39;].some</span><span style="color:#E1E4E8;">(function(</span><span style="color:#B392F0;">item</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">item</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;number&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">	});</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(num</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//reduce</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">迭代</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">arr</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> [1, </span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">]</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">num</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">arr.reduce</span><span style="color:#E1E4E8;">(function(</span><span style="color:#B392F0;">prev,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">item</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">//prev</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">上一次的返回值</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">//item</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">当前项</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">console.log(prev</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">//return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">prev</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">item</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	}, n); </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">n初始的值</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(num</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; </span><span style="color:#B392F0;">6</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//reduceRight</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">和reduce顺序相反</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//keys</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">遍历每一项的索引的接口</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">使用for</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">of遍历</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log([1,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">].keys</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">	for(</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">arr.keys</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">console.log(key</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//打印索引</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//for</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">遍历数组每一项的值</span><span style="color:#E1E4E8;">; </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> 遍历数组每一项的索引</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//entries</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">遍历接口</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">可以遍历到索引和每一项</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">每一次遍历得到一个数组[索引,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">当前项]</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//一般可以通过数组的结构赋值获取到遍历的结果</span></span>
<span class="line"><span style="color:#E1E4E8;">	for(</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> [index, </span><span style="color:#9ECBFF;">item]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">arr.entries</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">console.log(index,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">item</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">console.log(Array.prototype</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//copyWithin</span><span style="color:#24292E;"> </span><span style="color:#032F62;">从原数组中读取内容,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">替换数组的指定位置的内容</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//参数(替换的目标起始位置,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">查找的起始位置,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">查找的结束位置/默认到结尾</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//原数组length不变,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">如果有超出部分截取掉</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arr</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> [1, </span><span style="color:#005CC5;">2</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">7</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8</span><span style="color:#032F62;">]</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(arr.copyWithin(4,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">)); </span><span style="color:#6F42C1;">//[1,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">7</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8</span><span style="color:#032F62;">]</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(arr.copyWithin(3,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)); </span><span style="color:#6F42C1;">//[1,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">7</span><span style="color:#032F62;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//includes</span><span style="color:#24292E;"> </span><span style="color:#032F62;">判断数组中有没有某一项,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">参数2是开始查找的位置</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log([1,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#032F62;">].include</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">1</span><span style="color:#24292E;">)); </span><span style="color:#6F42C1;">//true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arr</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> [1, </span><span style="color:#005CC5;">2</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#032F62;">]</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//遍历数组的方法,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">参数是一个函数,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">自己函数中的this是window</span><span style="color:#24292E;">; </span><span style="color:#6F42C1;">改变this指向,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">可以通过第二个参数改变函数中的this</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//reduce,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">reduceRight不可以改变this,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">第二参数给初始值赋值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//fill</span><span style="color:#24292E;"> </span><span style="color:#032F62;">按照指定字符填充数组的指定位置</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">会改变原数组</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//将数组的每一项都变成指定字符</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(arr.fill(</span><span style="color:#6F42C1;">&#39;sunny&#39;</span><span style="color:#24292E;">)); </span><span style="color:#6F42C1;">//[</span><span style="color:#6F42C1;">&#39;sunny&#39;</span><span style="color:#6F42C1;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;sunny&#39;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;sunny&#39;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;sunny&#39;]</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(arr.fill(</span><span style="color:#6F42C1;">&#39;sunny&#39;</span><span style="color:#6F42C1;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)); </span><span style="color:#6F42C1;">//[1,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#032F62;">,&#39;sunny&#39;,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#032F62;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//filter</span><span style="color:#24292E;"> </span><span style="color:#032F62;">遍历数组,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">根据返回值去过滤原数组（原数组不变）</span><span style="color:#24292E;"> </span><span style="color:#032F62;">es5</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arr</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;sunny&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;sunny&#39;]</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">newArr</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arr.filter</span><span style="color:#24292E;">(function(</span><span style="color:#6F42C1;">item,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">index</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">//如果返回true留下当前项,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">返回false不留下当前项</span><span style="color:#24292E;">;  </span><span style="color:#6F42C1;">结果返回一个新数组</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">//return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">//return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">typeof</span><span style="color:#24292E;"> </span><span style="color:#032F62;">item</span><span style="color:#24292E;"> </span><span style="color:#032F62;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;number&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	})</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(newArr</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//[1,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#032F62;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//find</span><span style="color:#24292E;"> </span><span style="color:#032F62;">先遍历数组,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">一旦参数函数返回true,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">停止查找</span><span style="color:#24292E;"> </span><span style="color:#032F62;">返回当前项</span><span style="color:#24292E;"> (es6)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//只会查找一个</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">num</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arr.find</span><span style="color:#24292E;">(function(</span><span style="color:#6F42C1;">item</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">typeof</span><span style="color:#24292E;"> </span><span style="color:#032F62;">item</span><span style="color:#24292E;"> </span><span style="color:#032F62;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;number&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	})</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(num</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//findIndex</span><span style="color:#24292E;"> </span><span style="color:#032F62;">先遍历数组,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">一旦参数函数返回true,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">停止查找</span><span style="color:#24292E;"> </span><span style="color:#032F62;">返回当前索引</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//只会查找一个</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">index</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arr.find</span><span style="color:#24292E;">(function(</span><span style="color:#6F42C1;">item</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">typeof</span><span style="color:#24292E;"> </span><span style="color:#032F62;">item</span><span style="color:#24292E;"> </span><span style="color:#032F62;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;string&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	})</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(index</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//every</span><span style="color:#24292E;"> </span><span style="color:#032F62;">遍历数组,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">如果遍历每一项都返回true,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">最后结果为true</span><span style="color:#24292E;">; </span><span style="color:#6F42C1;">只要有一个为false,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">结果为false</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">num</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> [1, </span><span style="color:#005CC5;">2</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">].every</span><span style="color:#24292E;">(function(</span><span style="color:#6F42C1;">item</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">item</span><span style="color:#24292E;"> </span><span style="color:#032F62;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;number&#39;</span></span>
<span class="line"><span style="color:#24292E;">	});</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(num</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">num</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> [1, </span><span style="color:#005CC5;">2</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;sunny&#39;].every</span><span style="color:#24292E;">(function(</span><span style="color:#6F42C1;">item</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">item</span><span style="color:#24292E;"> </span><span style="color:#032F62;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;number&#39;</span></span>
<span class="line"><span style="color:#24292E;">	});</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(num</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//some</span><span style="color:#24292E;"> </span><span style="color:#032F62;">遍历数组,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">只要有一项都是true,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">结果为true</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">num</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> [1, </span><span style="color:#005CC5;">2</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;sunny&#39;].some</span><span style="color:#24292E;">(function(</span><span style="color:#6F42C1;">item</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">item</span><span style="color:#24292E;"> </span><span style="color:#032F62;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;number&#39;</span></span>
<span class="line"><span style="color:#24292E;">	});</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(num</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//reduce</span><span style="color:#24292E;"> </span><span style="color:#032F62;">迭代</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arr</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> [1, </span><span style="color:#005CC5;">2</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">]</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">num</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arr.reduce</span><span style="color:#24292E;">(function(</span><span style="color:#6F42C1;">prev,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">item</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">//prev</span><span style="color:#24292E;"> </span><span style="color:#032F62;">上一次的返回值</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">//item</span><span style="color:#24292E;"> </span><span style="color:#032F62;">当前项</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">console.log(prev</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">//return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">prev</span><span style="color:#24292E;"> </span><span style="color:#032F62;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">item</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	}, n); </span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">n初始的值</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(num</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span><span style="color:#6F42C1;">6</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//reduceRight</span><span style="color:#24292E;"> </span><span style="color:#032F62;">和reduce顺序相反</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//keys</span><span style="color:#24292E;"> </span><span style="color:#032F62;">遍历每一项的索引的接口</span><span style="color:#24292E;"> </span><span style="color:#032F62;">使用for</span><span style="color:#24292E;"> </span><span style="color:#032F62;">of遍历</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log([1,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#032F62;">].keys</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">	for(</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">of</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arr.keys</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">console.log(key</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//打印索引</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//for</span><span style="color:#24292E;"> </span><span style="color:#032F62;">of</span><span style="color:#24292E;"> </span><span style="color:#032F62;">遍历数组每一项的值</span><span style="color:#24292E;">; </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> 遍历数组每一项的索引</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//entries</span><span style="color:#24292E;"> </span><span style="color:#032F62;">遍历接口</span><span style="color:#24292E;"> </span><span style="color:#032F62;">可以遍历到索引和每一项</span><span style="color:#24292E;"> </span><span style="color:#032F62;">每一次遍历得到一个数组[索引,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">当前项]</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//一般可以通过数组的结构赋值获取到遍历的结果</span></span>
<span class="line"><span style="color:#24292E;">	for(</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> [index, </span><span style="color:#032F62;">item]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">of</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arr.entries</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">console.log(index,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">item</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><p>数组的空位 --&gt; 当前数组的某个索引位置 没有任何值, undefined不是空位 //判断一个数组中某一个位置是不是空位 使用in方法判断 //in 判断数组索引位置上有没有值</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">arr</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> [, </span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">,]</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(arr.length</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//4</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">查看有几个逗号</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">arr</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> [, </span><span style="color:#9ECBFF;">undefined,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">,]</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">arr</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//true</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(0</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">arr</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//es5中数组方法对空位处理不一致,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">一般直接跳过空位</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//es6中将空位处理为undefined</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">arr</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> [1, </span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">]</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">arr.fillter(function(item</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">console.log(item</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">arr.find(function(item</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">console.log(item</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	for(</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">item</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">arr</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">console.log(item</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arr</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> [, </span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">,]</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(arr.length</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//4</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">查看有几个逗号</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arr</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> [, </span><span style="color:#032F62;">undefined,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">,]</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arr</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//true</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(0</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arr</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//es5中数组方法对空位处理不一致,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">一般直接跳过空位</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//es6中将空位处理为undefined</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arr</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> [1, </span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">]</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">arr.fillter(function(item</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">console.log(item</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">arr.find(function(item</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">console.log(item</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	for(</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">item</span><span style="color:#24292E;"> </span><span style="color:#032F62;">of</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arr</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">console.log(item</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><h3 id="函数的扩展" tabindex="-1">函数的扩展 <a class="header-anchor" href="#函数的扩展" aria-label="Permalink to &quot;函数的扩展&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">//参数默认值</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(x</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;sunny&#39;,</span><span style="color:#E1E4E8;"> y</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;cherry&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">console.log(x,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">y</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">fn(0</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//0,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cherry</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//参数使用结构赋值</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">({name=&#39;sunny&#39;, age=18}) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;">{name=</span><span style="color:#B392F0;">&#39;sunny&#39;</span><span style="color:#B392F0;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">age=</span><span style="color:#79B8FF;">18</span><span style="color:#9ECBFF;">}</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">undefined</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">console.log(name,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">age</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(); </span><span style="color:#B392F0;">//undefined</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">undefined</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//length</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">如果形参有默认值length就会失真,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">如果没有默认值就是形参的个数</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">x,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">y=</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">fn(1,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//fn(,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">会报错</span><span style="color:#E1E4E8;">; </span><span style="color:#B392F0;">参数默认值一般放在最后面</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(fn.length</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//arguments</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">是一个类数组</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">..</span><span style="color:#E1E4E8;">.arg) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">console.log(arguments</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">console.log(arg</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//数组</span><span style="color:#E1E4E8;"> [1, </span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">fn(1,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">有名函数的name</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">() {}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(fn.name</span><span style="color:#E1E4E8;">) // </span><span style="color:#9ECBFF;">&#39;fn&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log((function(</span><span style="color:#E1E4E8;">) {}())); // &#39;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//特殊情况</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//1.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">通过bind方法得到一个新函数,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">name是bound</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">原函数名</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">fn1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">fn.bind</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(fn1.name</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//bound</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">fn</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//2.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">通过构造函数方式创建一个函数</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//new</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Functon</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">&#39;形参&#39;</span><span style="color:#B392F0;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;函数体&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//new</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Function</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">&#39;函数体&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">fn</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">形参</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">{</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">函数体}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">fn2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Function</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">&#39;x, y&#39;</span><span style="color:#B392F0;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;console.log(x, y)&#39;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">x</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">y</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(10,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">; </span><span style="color:#B392F0;">110</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(fn2.name</span><span style="color:#E1E4E8;">);</span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">匿名</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//JSON字符串变成JSON对象</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">使用new</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Function</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;[{name:&quot;sunny&quot;}, {age:18}]&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">arr</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> (new </span><span style="color:#9ECBFF;">Function</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">&quot;return &quot;</span><span style="color:#B392F0;">+str</span><span style="color:#E1E4E8;">))();</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(arr</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//arr</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> [{</span><span style="color:#B392F0;">name:</span><span style="color:#B392F0;">&quot;sunny&quot;</span><span style="color:#B392F0;">},</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{age:18}]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">//参数默认值</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(x</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;sunny&#39;,</span><span style="color:#24292E;"> y</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;cherry&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">console.log(x,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">y</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">fn(0</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//0,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cherry</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//参数使用结构赋值</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">({name=&#39;sunny&#39;, age=18}) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">//</span><span style="color:#24292E;">{name=</span><span style="color:#6F42C1;">&#39;sunny&#39;</span><span style="color:#6F42C1;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">age=</span><span style="color:#005CC5;">18</span><span style="color:#032F62;">}</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">undefined</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">console.log(name,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">age</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(); </span><span style="color:#6F42C1;">//undefined</span><span style="color:#24292E;"> </span><span style="color:#032F62;">undefined</span><span style="color:#24292E;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//length</span><span style="color:#24292E;"> </span><span style="color:#032F62;">如果形参有默认值length就会失真,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">如果没有默认值就是形参的个数</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">x,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">y=</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">) {}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">fn(1,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//fn(,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">会报错</span><span style="color:#24292E;">; </span><span style="color:#6F42C1;">参数默认值一般放在最后面</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(fn.length</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//arguments</span><span style="color:#24292E;"> </span><span style="color:#032F62;">是一个类数组</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">..</span><span style="color:#24292E;">.arg) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">console.log(arguments</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">console.log(arg</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//数组</span><span style="color:#24292E;"> [1, </span><span style="color:#005CC5;">2</span><span style="color:#032F62;">]</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">fn(1,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">有名函数的name</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(fn.name</span><span style="color:#24292E;">) // </span><span style="color:#032F62;">&#39;fn&#39;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log((function(</span><span style="color:#24292E;">) {}())); // &#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//特殊情况</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//1.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">通过bind方法得到一个新函数,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">name是bound</span><span style="color:#24292E;"> </span><span style="color:#032F62;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">原函数名</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">fn1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">fn.bind</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(fn1.name</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//bound</span><span style="color:#24292E;"> </span><span style="color:#032F62;">fn</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//2.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">通过构造函数方式创建一个函数</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Functon</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">&#39;形参&#39;</span><span style="color:#6F42C1;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;函数体&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Function</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">&#39;函数体&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">fn</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">形参</span><span style="color:#24292E;">) </span><span style="color:#032F62;">{</span><span style="color:#24292E;"> </span><span style="color:#032F62;">函数体}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">fn2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Function</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">&#39;x, y&#39;</span><span style="color:#6F42C1;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;console.log(x, y)&#39;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">x</span><span style="color:#24292E;"> </span><span style="color:#032F62;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">y</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(10,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">; </span><span style="color:#6F42C1;">110</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(fn2.name</span><span style="color:#24292E;">);</span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">匿名</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//JSON字符串变成JSON对象</span><span style="color:#24292E;"> </span><span style="color:#032F62;">使用new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Function</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">var</span><span style="color:#24292E;"> </span><span style="color:#032F62;">str</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;[{name:&quot;sunny&quot;}, {age:18}]&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arr</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> (new </span><span style="color:#032F62;">Function</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">&quot;return &quot;</span><span style="color:#6F42C1;">+str</span><span style="color:#24292E;">))();</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(arr</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//arr</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> [{</span><span style="color:#6F42C1;">name:</span><span style="color:#6F42C1;">&quot;sunny&quot;</span><span style="color:#6F42C1;">},</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{age:18}]</span></span></code></pre></div><h3 id="参数作用域问题" tabindex="-1">参数作用域问题 <a class="header-anchor" href="#参数作用域问题" aria-label="Permalink to &quot;参数作用域问题&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">//函数执行时候先给形参赋值,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">形参也是私有变量,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//如果给形参的默认值是一个变量,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">先看是不是自己的私有变量,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">不是自己的,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">查看在全局中是否有这个变量,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">没有就报错</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">m</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">x</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">m,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">y</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">n</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">//私有作用域：私有变量</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">x,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">m,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">n</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">console.log(x,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">y</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">m</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;sunny&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">//var</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">m</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;cherry&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">18</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(); </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">x</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">x,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">y</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">x</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">console.log(x,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">y</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">fn(1</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">//函数执行时候先给形参赋值,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">形参也是私有变量,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//如果给形参的默认值是一个变量,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">先看是不是自己的私有变量,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">不是自己的,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">查看在全局中是否有这个变量,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">没有就报错</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">m</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">n</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">x</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">m,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">y</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">n</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">//私有作用域：私有变量</span><span style="color:#24292E;"> </span><span style="color:#032F62;">x,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">m,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">n</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">console.log(x,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">y</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">m</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;sunny&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">//var</span><span style="color:#24292E;"> </span><span style="color:#032F62;">m</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;cherry&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">n</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">18</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(); </span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">x</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">x,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">y</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">x</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">console.log(x,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">y</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">fn(1</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span></code></pre></div><h3 id="扩展运算符" tabindex="-1">扩展运算符 ... <a class="header-anchor" href="#扩展运算符" aria-label="Permalink to &quot;扩展运算符 ...&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">//将非数组变成数组(类数组</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">length</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;123&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log([...str]</span><span style="color:#E1E4E8;">);</span><span style="color:#B392F0;">//[</span><span style="color:#B392F0;">&#39;1&#39;</span><span style="color:#B392F0;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;2&#39;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;3&#39;]</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">console.log([...arguments]</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">fn(1,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> [1, </span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//将数组变成非数组</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">arr</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> [1, </span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">]</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(...arr</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//求数组最大值</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">arr</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> [121, </span><span style="color:#79B8FF;">123</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">134</span><span style="color:#9ECBFF;">]</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(Math.max.apply(null,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">arr</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(eval(</span><span style="color:#B392F0;">&quot;Math max(&quot;</span><span style="color:#B392F0;">+arr+</span><span style="color:#B392F0;">&quot;)&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(Math.max(...arr</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">//将非数组变成数组(类数组</span><span style="color:#24292E;"> </span><span style="color:#032F62;">length</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">str</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;123&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log([...str]</span><span style="color:#24292E;">);</span><span style="color:#6F42C1;">//[</span><span style="color:#6F42C1;">&#39;1&#39;</span><span style="color:#6F42C1;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;2&#39;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;3&#39;]</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">console.log([...arguments]</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">fn(1,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> [1, </span><span style="color:#005CC5;">2</span><span style="color:#032F62;">]</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//将数组变成非数组</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">var</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arr</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> [1, </span><span style="color:#005CC5;">2</span><span style="color:#032F62;">]</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(...arr</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//求数组最大值</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arr</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> [121, </span><span style="color:#005CC5;">123</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">134</span><span style="color:#032F62;">]</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(Math.max.apply(null,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arr</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(eval(</span><span style="color:#6F42C1;">&quot;Math max(&quot;</span><span style="color:#6F42C1;">+arr+</span><span style="color:#6F42C1;">&quot;)&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(Math.max(...arr</span><span style="color:#24292E;">));</span></span></code></pre></div><h3 id="箭头函数" tabindex="-1">箭头函数 <a class="header-anchor" href="#箭头函数" aria-label="Permalink to &quot;箭头函数&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">//箭头函数是匿名函数</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//函数体只有一行代码return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">可以省略</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//形参只有一个时候可以省略括号</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//语法：let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> (形参)=</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">{ </span><span style="color:#B392F0;">函数体</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//注意：</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//箭头函数没有this指向,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">里面的this是上一级作用域下的this</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//箭头函数没有arguments</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> (...arg)=</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">console.log(arg</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">fn(1,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//箭头函数不可以用作构造函数</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">因为不可以使用new执行</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">F</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> ()=&gt;{}</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">console.log(new</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">F</span><span style="color:#E1E4E8;">);</span><span style="color:#B392F0;">//F</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">not</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">constructor</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">x</span><span style="color:#E1E4E8;">=</span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;">x+1</span><span style="color:#E1E4E8;">;  == </span><span style="color:#9ECBFF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">x</span><span style="color:#E1E4E8;">=</span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;">{return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">x+1}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//通常函数当做参数时使用箭头函数</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">//箭头函数是匿名函数</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//函数体只有一行代码return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">可以省略</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//形参只有一个时候可以省略括号</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//语法：let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">fn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> (形参)=</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">{ </span><span style="color:#6F42C1;">函数体</span><span style="color:#24292E;"> </span><span style="color:#032F62;">}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//注意：</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//箭头函数没有this指向,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">里面的this是上一级作用域下的this</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//箭头函数没有arguments</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">fn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> (...arg)=</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">console.log(arg</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">fn(1,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//箭头函数不可以用作构造函数</span><span style="color:#24292E;"> </span><span style="color:#032F62;">因为不可以使用new执行</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">F</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> ()=&gt;{}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">console.log(new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">F</span><span style="color:#24292E;">);</span><span style="color:#6F42C1;">//F</span><span style="color:#24292E;"> </span><span style="color:#032F62;">not</span><span style="color:#24292E;"> </span><span style="color:#032F62;">constructor</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">fn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">x</span><span style="color:#24292E;">=</span><span style="color:#D73A49;">&gt;</span><span style="color:#032F62;">x+1</span><span style="color:#24292E;">;  == </span><span style="color:#032F62;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">fn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">x</span><span style="color:#24292E;">=</span><span style="color:#D73A49;">&gt;</span><span style="color:#032F62;">{return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">x+1}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//通常函数当做参数时使用箭头函数</span></span></code></pre></div><h3 id="对象的扩展" tabindex="-1">对象的扩展 <a class="header-anchor" href="#对象的扩展" aria-label="Permalink to &quot;对象的扩展&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;sunny&#39;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">age</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">person</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{name,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">age}</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">person{name:name,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">age:age}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;cherry&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">obj</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">() {},</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">//fn:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">function</span><span style="color:#E1E4E8;">() </span><span style="color:#9ECBFF;">{}</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">//属性名是字符串</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">属性名使用[]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">里面放变量</span></span>
<span class="line"><span style="color:#E1E4E8;">		[str]</span><span style="color:#B392F0;">:name</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//Object.is(参数1,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">参数2</span><span style="color:#E1E4E8;">) 判断两个值是否相等</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-0</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">NaN</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">NaN</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.dir(Object</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//Object.assign(参数1,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">参数2</span><span style="color:#E1E4E8;">) 合并对象  将参数2合并到参数1上 返回一个对象</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">obj1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{name:&#39;sunny&#39;}</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">obj2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{age:18}</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">person</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Object.assign</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">obj1,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">obj2</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;">{name:</span><span style="color:#B392F0;">&#39;sunny&#39;</span><span style="color:#B392F0;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">age:18}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">es7中提供了对象的扩展运算符...</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">person</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{...obj1,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">...obj2}</span><span style="color:#E1E4E8;">; </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;">{name:</span><span style="color:#B392F0;">&#39;sunny&#39;</span><span style="color:#B392F0;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">age:18}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//Object.getOwnPropertyDescriptor</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">获取一个对象中某个描述</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(Object.getOwnPropertyDescriptor(</span><span style="color:#B392F0;">&#39;123&#39;</span><span style="color:#B392F0;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;length&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//字符串的length不可以修改,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">字符串中的方法是不可以改变原字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;123&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">str.length</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(str</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//123</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">/*</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">configurable:</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">是否可配置</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">可以删除这个属性</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">enumerable:</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">是否枚举</span><span style="color:#E1E4E8;"> (用for </span><span style="color:#9ECBFF;">in遍历不出来</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">value:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">writeable:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">是否可以修改</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">*/</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">person</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{name:&#39;sunny&#39;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">age:18}</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//Object.keys</span><span style="color:#E1E4E8;">()  返回值是数组 [所有可枚举的属性]</span></span>
<span class="line"><span style="color:#E1E4E8;">	console.log(</span><span style="color:#B392F0;">Object.keys(person</span><span style="color:#E1E4E8;">)); </span><span style="color:#B392F0;">//[</span><span style="color:#B392F0;">&#39;name&#39;</span><span style="color:#B392F0;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;age&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//Object.values</span><span style="color:#E1E4E8;">() 返回值是数组 [所有可枚举的属性的键值]</span></span>
<span class="line"><span style="color:#E1E4E8;">	console.log(</span><span style="color:#B392F0;">Object.values(person</span><span style="color:#E1E4E8;">)); </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sunny</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">18</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//Object.entries</span><span style="color:#E1E4E8;">() 返回值是数组 [每一项也是一个数组[键, 值]]</span></span>
<span class="line"><span style="color:#E1E4E8;">	console.log(</span><span style="color:#B392F0;">Object.entries(person</span><span style="color:#E1E4E8;">)); </span><span style="color:#B392F0;">//[[</span><span style="color:#B392F0;">&#39;name&#39;</span><span style="color:#B392F0;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;sunny&#39;],</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;age&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;18&#39;]]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;sunny&#39;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">age</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">18</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">person</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{name,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">age}</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">person{name:name,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">age:age}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">str</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;cherry&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">obj</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">() {},</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">//fn:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">function</span><span style="color:#24292E;">() </span><span style="color:#032F62;">{}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">//属性名是字符串</span><span style="color:#24292E;"> </span><span style="color:#032F62;">属性名使用[]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">里面放变量</span></span>
<span class="line"><span style="color:#24292E;">		[str]</span><span style="color:#6F42C1;">:name</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//Object.is(参数1,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">参数2</span><span style="color:#24292E;">) 判断两个值是否相等</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-0</span><span style="color:#24292E;"> </span><span style="color:#032F62;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">   </span><span style="color:#032F62;">NaN</span><span style="color:#24292E;"> </span><span style="color:#032F62;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">NaN</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.dir(Object</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//Object.assign(参数1,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">参数2</span><span style="color:#24292E;">) 合并对象  将参数2合并到参数1上 返回一个对象</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">obj1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{name:&#39;sunny&#39;}</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">obj2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{age:18}</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">person</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Object.assign</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">obj1,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">obj2</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//</span><span style="color:#24292E;">{name:</span><span style="color:#6F42C1;">&#39;sunny&#39;</span><span style="color:#6F42C1;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">age:18}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">es7中提供了对象的扩展运算符...</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">person</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{...obj1,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">...obj2}</span><span style="color:#24292E;">; </span><span style="color:#6F42C1;">//</span><span style="color:#24292E;">{name:</span><span style="color:#6F42C1;">&#39;sunny&#39;</span><span style="color:#6F42C1;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">age:18}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//Object.getOwnPropertyDescriptor</span><span style="color:#24292E;"> </span><span style="color:#032F62;">获取一个对象中某个描述</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(Object.getOwnPropertyDescriptor(</span><span style="color:#6F42C1;">&#39;123&#39;</span><span style="color:#6F42C1;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;length&#39;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//字符串的length不可以修改,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">字符串中的方法是不可以改变原字符串</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">str</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;123&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">str.length</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(str</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//123</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">/*</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">*</span><span style="color:#24292E;"> </span><span style="color:#032F62;">configurable:</span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span><span style="color:#032F62;">是否可配置</span><span style="color:#24292E;"> </span><span style="color:#032F62;">可以删除这个属性</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">*</span><span style="color:#24292E;"> </span><span style="color:#032F62;">enumerable:</span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span><span style="color:#032F62;">是否枚举</span><span style="color:#24292E;"> (用for </span><span style="color:#032F62;">in遍历不出来</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">*</span><span style="color:#24292E;"> </span><span style="color:#032F62;">value:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">*</span><span style="color:#24292E;"> </span><span style="color:#032F62;">writeable:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span><span style="color:#032F62;">是否可以修改</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">*/</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">person</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{name:&#39;sunny&#39;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">age:18}</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//Object.keys</span><span style="color:#24292E;">()  返回值是数组 [所有可枚举的属性]</span></span>
<span class="line"><span style="color:#24292E;">	console.log(</span><span style="color:#6F42C1;">Object.keys(person</span><span style="color:#24292E;">)); </span><span style="color:#6F42C1;">//[</span><span style="color:#6F42C1;">&#39;name&#39;</span><span style="color:#6F42C1;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;age&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//Object.values</span><span style="color:#24292E;">() 返回值是数组 [所有可枚举的属性的键值]</span></span>
<span class="line"><span style="color:#24292E;">	console.log(</span><span style="color:#6F42C1;">Object.values(person</span><span style="color:#24292E;">)); </span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sunny</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">18</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//Object.entries</span><span style="color:#24292E;">() 返回值是数组 [每一项也是一个数组[键, 值]]</span></span>
<span class="line"><span style="color:#24292E;">	console.log(</span><span style="color:#6F42C1;">Object.entries(person</span><span style="color:#24292E;">)); </span><span style="color:#6F42C1;">//[[</span><span style="color:#6F42C1;">&#39;name&#39;</span><span style="color:#6F42C1;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;sunny&#39;],</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;age&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;18&#39;]]</span></span></code></pre></div><h3 id="对象的set和get" tabindex="-1">对象的set和get <a class="header-anchor" href="#对象的set和get" aria-label="Permalink to &quot;对象的set和get&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">obj</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">_name:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;A&#39;,</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">name</span><span style="color:#E1E4E8;">()</span><span style="color:#9ECBFF;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">//通过obj获取name属性就会触发这个函数</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">//可以通过teturn获取返回值</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">//console.log(1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">this._name</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">set</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">val</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">//val</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">设置的值-</span><span style="color:#E1E4E8;">-</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">通过obj给name属性设置值就会触发这个函数</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">//console.log(2</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">this</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">obj</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">this._name</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">val</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(obj.name</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sunny</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">obj.name</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;cherry&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">obj</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">_name:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;A&#39;,</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">name</span><span style="color:#24292E;">()</span><span style="color:#032F62;">{</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">//通过obj获取name属性就会触发这个函数</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">//可以通过teturn获取返回值</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">//console.log(1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">this._name</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">set</span><span style="color:#24292E;"> </span><span style="color:#032F62;">name</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">val</span><span style="color:#24292E;">) </span><span style="color:#032F62;">{</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">//val</span><span style="color:#24292E;"> </span><span style="color:#032F62;">设置的值-</span><span style="color:#24292E;">-</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">通过obj给name属性设置值就会触发这个函数</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">//console.log(2</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">this</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">obj</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">this._name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">val</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(obj.name</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sunny</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">obj.name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;cherry&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><h3 id="symbol" tabindex="-1">Symbol <a class="header-anchor" href="#symbol" aria-label="Permalink to &quot;Symbol&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">//Symbol</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">是一个新的基本数据类型</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">而且是一个值类型</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//使用Symbol函数执行</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">得到一个Symbol数据类型</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//Symbol跟字符串类型差不多</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">但是使用Symbol函数得到一个数据</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">每一个是完全不同的</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sym</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Symbol</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sym2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Symbol</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">typeof</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sym</span><span style="color:#E1E4E8;">; </span><span style="color:#B392F0;">//</span><span style="color:#B392F0;">&#39;symbol&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">sym</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sym2</span><span style="color:#E1E4E8;">; </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//Symbol可以接受一个参数</span><span style="color:#E1E4E8;">(); </span><span style="color:#B392F0;">参数是对Symbol数据类型的描述</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//即使描述一样,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">但是值也是不一样的</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sym</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Symbol</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">&#39;fn&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sym2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Symbol</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">&#39;fn&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">sym</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sym2</span><span style="color:#E1E4E8;">; </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//一般当做对象的属性；</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">任意一个Symbol得到的值都是不同的</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">obj</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">sym:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;sunny&#39;,</span></span>
<span class="line"><span style="color:#E1E4E8;">		[sym]</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;sunny&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">obj.[sym2]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;sunny&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(obj</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//得到三个不同的值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//Symbol值不可以跟其他值计算</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//Symbol</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">不可以转化为数字</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//Symbol</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">不可以字符串拼接</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(Symbol(</span><span style="color:#B392F0;">&#39;1&#39;</span><span style="color:#E1E4E8;">) + 1); </span><span style="color:#B392F0;">//报错</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">Number(Symbol(1</span><span style="color:#E1E4E8;">)); </span><span style="color:#B392F0;">//报错</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">Symbol(1</span><span style="color:#E1E4E8;">) +</span><span style="color:#9ECBFF;">&#39;1&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//可以转化为布尔值</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">Symbol(</span><span style="color:#B392F0;">&#39;1&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">//可以toString变成显示字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">console.log(Symbol(</span><span style="color:#B392F0;">&#39;ZF&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#B392F0;">.toString</span><span style="color:#E1E4E8;">()); </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Symbol(&#39;ZF&#39;)&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">//Symbol.for</span><span style="color:#E1E4E8;">() 如果之前有相同参数的Symbol的值, 找到这个值返回</span></span>
<span class="line"><span style="color:#E1E4E8;">    //如果没有找到, 就创建一个新的Symbol值</span></span>
<span class="line"><span style="color:#E1E4E8;">    let foo = Symbol(</span><span style="color:#B392F0;">&#39;sunny&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">foo2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Symbol.for</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">&#39;Sunny&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">foo3</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Symbol.for</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">&#39;Sunny&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">foo2</span><span style="color:#E1E4E8;">; </span><span style="color:#B392F0;">//false</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">foo2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">foo3</span><span style="color:#E1E4E8;">; </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Symbol.keyFor</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">symbol值</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">找到使用Symbol.keyFor</span><span style="color:#E1E4E8;">()</span><span style="color:#9ECBFF;">创建的值的描述</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">//如果使用的是Symbol创建的是获取不到的</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">Symbol.keyFor(foo2</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//sunny</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">Symbol.keyFor(foo</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//undefined</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">//Symbol</span><span style="color:#24292E;"> </span><span style="color:#032F62;">是一个新的基本数据类型</span><span style="color:#24292E;">  </span><span style="color:#032F62;">而且是一个值类型</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//使用Symbol函数执行</span><span style="color:#24292E;"> </span><span style="color:#032F62;">得到一个Symbol数据类型</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//Symbol跟字符串类型差不多</span><span style="color:#24292E;"> </span><span style="color:#032F62;">但是使用Symbol函数得到一个数据</span><span style="color:#24292E;"> </span><span style="color:#032F62;">每一个是完全不同的</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sym</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Symbol</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sym2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Symbol</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">typeof</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sym</span><span style="color:#24292E;">; </span><span style="color:#6F42C1;">//</span><span style="color:#6F42C1;">&#39;symbol&#39;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">sym</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sym2</span><span style="color:#24292E;">; </span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//Symbol可以接受一个参数</span><span style="color:#24292E;">(); </span><span style="color:#6F42C1;">参数是对Symbol数据类型的描述</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//即使描述一样,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">但是值也是不一样的</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sym</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Symbol</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">&#39;fn&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sym2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Symbol</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">&#39;fn&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">sym</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sym2</span><span style="color:#24292E;">; </span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//一般当做对象的属性；</span><span style="color:#24292E;"> </span><span style="color:#032F62;">任意一个Symbol得到的值都是不同的</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">obj</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">sym:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;sunny&#39;,</span></span>
<span class="line"><span style="color:#24292E;">		[sym]</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;sunny&#39;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">obj.[sym2]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;sunny&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(obj</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//得到三个不同的值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//Symbol值不可以跟其他值计算</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//Symbol</span><span style="color:#24292E;"> </span><span style="color:#032F62;">不可以转化为数字</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//Symbol</span><span style="color:#24292E;"> </span><span style="color:#032F62;">不可以字符串拼接</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(Symbol(</span><span style="color:#6F42C1;">&#39;1&#39;</span><span style="color:#24292E;">) + 1); </span><span style="color:#6F42C1;">//报错</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">Number(Symbol(1</span><span style="color:#24292E;">)); </span><span style="color:#6F42C1;">//报错</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">Symbol(1</span><span style="color:#24292E;">) +</span><span style="color:#032F62;">&#39;1&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//可以转化为布尔值</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">Symbol(</span><span style="color:#6F42C1;">&#39;1&#39;</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">//可以toString变成显示字符串</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">console.log(Symbol(</span><span style="color:#6F42C1;">&#39;ZF&#39;</span><span style="color:#24292E;">)</span><span style="color:#6F42C1;">.toString</span><span style="color:#24292E;">()); </span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Symbol(&#39;ZF&#39;)&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">//Symbol.for</span><span style="color:#24292E;">() 如果之前有相同参数的Symbol的值, 找到这个值返回</span></span>
<span class="line"><span style="color:#24292E;">    //如果没有找到, 就创建一个新的Symbol值</span></span>
<span class="line"><span style="color:#24292E;">    let foo = Symbol(</span><span style="color:#6F42C1;">&#39;sunny&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">foo2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Symbol.for</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">&#39;Sunny&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">foo3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Symbol.for</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">&#39;Sunny&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">foo2</span><span style="color:#24292E;">; </span><span style="color:#6F42C1;">//false</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">foo2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">foo3</span><span style="color:#24292E;">; </span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Symbol.keyFor</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">symbol值</span><span style="color:#24292E;">) </span><span style="color:#032F62;">找到使用Symbol.keyFor</span><span style="color:#24292E;">()</span><span style="color:#032F62;">创建的值的描述</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">//如果使用的是Symbol创建的是获取不到的</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">Symbol.keyFor(foo2</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//sunny</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">Symbol.keyFor(foo</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//undefined</span></span></code></pre></div><h3 id="set" tabindex="-1">set <a class="header-anchor" href="#set" aria-label="Permalink to &quot;set&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">//类似数组</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">只有值val,</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">没有键key</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//通过构造函数方式,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">创建一个set实例</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Set</span><span style="color:#E1E4E8;">(); </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;">{ </span><span style="color:#9ECBFF;">...</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//参数是一个数组</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">或者是类数组</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">只要是有enterable接口</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//有interable接口：</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">数组,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">arguments</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">元素集合</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">map</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">Set</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//特点：</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">会默认去重</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Set</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]); </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{</span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//size:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">set实例的大小个数</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">增加</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">如果之前没有则添加上，</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">如果存在，不加</span><span style="color:#E1E4E8;">; </span><span style="color:#B392F0;">返回值是增加后的set实例(可以实现链式写法</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//参数一次添加一个</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">set</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Set</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, null, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">set</span><span style="color:#E1E4E8;">.add(1).add(</span><span style="color:#B392F0;">10</span><span style="color:#E1E4E8;">).add(</span><span style="color:#B392F0;">20,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">300</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//delete(删除的值</span><span style="color:#E1E4E8;">) 删除 返回值是true/false 如果里面有这一项就删除成功/true, 否则删除失败/false</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">set</span><span style="color:#E1E4E8;">.delete(1);</span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">set</span><span style="color:#E1E4E8;">.delete(1000); </span><span style="color:#B392F0;">//false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//has</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">判断有没有这一项</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">返回值是true/</span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">set</span><span style="color:#E1E4E8;">.has(NaN); </span><span style="color:#B392F0;">//false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//clear</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">清空</span><span style="color:#E1E4E8;">; </span><span style="color:#B392F0;">没有返回值</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">undefined</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">set.clear</span><span style="color:#E1E4E8;">(); </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;">{ </span><span style="color:#9ECBFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">forEach</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">keys</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">values</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">entries</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">遍历方法</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">set</span><span style="color:#E1E4E8;">.forEach((item, </span><span style="color:#9ECBFF;">index,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">input</span><span style="color:#E1E4E8;">)=</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">//item,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">index</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">当前项</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">//input</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">当前set实例</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">console.log(item,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">index</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">	})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	for(</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">set.keys</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">//key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">是val</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	for(</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">set.values</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">//value</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">是val</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	for(</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">set.entries</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">//key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">是val</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">//类似数组</span><span style="color:#24292E;"> </span><span style="color:#032F62;">只有值val,</span><span style="color:#24292E;">  </span><span style="color:#032F62;">没有键key</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//通过构造函数方式,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">创建一个set实例</span></span>
<span class="line"><span style="color:#24292E;">	 </span><span style="color:#6F42C1;">new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Set</span><span style="color:#24292E;">(); </span><span style="color:#6F42C1;">//</span><span style="color:#24292E;">{ </span><span style="color:#032F62;">...</span><span style="color:#24292E;"> </span><span style="color:#032F62;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//参数是一个数组</span><span style="color:#24292E;"> </span><span style="color:#032F62;">或者是类数组</span><span style="color:#24292E;"> </span><span style="color:#032F62;">只要是有enterable接口</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//有interable接口：</span><span style="color:#24292E;"> </span><span style="color:#032F62;">数组,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arguments</span><span style="color:#24292E;"> </span><span style="color:#032F62;">元素集合</span><span style="color:#24292E;"> </span><span style="color:#032F62;">map</span><span style="color:#24292E;">  </span><span style="color:#032F62;">Set</span><span style="color:#24292E;"> </span><span style="color:#032F62;">字符串</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//特点：</span><span style="color:#24292E;"> </span><span style="color:#032F62;">会默认去重</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Set</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]); </span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{</span><span style="color:#005CC5;">1</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#032F62;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//size:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">set实例的大小个数</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">增加</span><span style="color:#24292E;"> </span><span style="color:#032F62;">如果之前没有则添加上，</span><span style="color:#24292E;"> </span><span style="color:#032F62;">如果存在，不加</span><span style="color:#24292E;">; </span><span style="color:#6F42C1;">返回值是增加后的set实例(可以实现链式写法</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//参数一次添加一个</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;">  </span><span style="color:#032F62;">set</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Set</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, null, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">set</span><span style="color:#24292E;">.add(1).add(</span><span style="color:#6F42C1;">10</span><span style="color:#24292E;">).add(</span><span style="color:#6F42C1;">20,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">300</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//delete(删除的值</span><span style="color:#24292E;">) 删除 返回值是true/false 如果里面有这一项就删除成功/true, 否则删除失败/false</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">set</span><span style="color:#24292E;">.delete(1);</span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">set</span><span style="color:#24292E;">.delete(1000); </span><span style="color:#6F42C1;">//false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//has</span><span style="color:#24292E;"> </span><span style="color:#032F62;">判断有没有这一项</span><span style="color:#24292E;"> </span><span style="color:#032F62;">返回值是true/</span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">set</span><span style="color:#24292E;">.has(NaN); </span><span style="color:#6F42C1;">//false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//clear</span><span style="color:#24292E;"> </span><span style="color:#032F62;">清空</span><span style="color:#24292E;">; </span><span style="color:#6F42C1;">没有返回值</span><span style="color:#24292E;"> </span><span style="color:#032F62;">undefined</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">set.clear</span><span style="color:#24292E;">(); </span><span style="color:#6F42C1;">//</span><span style="color:#24292E;">{ </span><span style="color:#032F62;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">forEach</span><span style="color:#24292E;"> </span><span style="color:#032F62;">keys</span><span style="color:#24292E;"> </span><span style="color:#032F62;">values</span><span style="color:#24292E;"> </span><span style="color:#032F62;">entries</span><span style="color:#24292E;"> </span><span style="color:#032F62;">遍历方法</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">set</span><span style="color:#24292E;">.forEach((item, </span><span style="color:#032F62;">index,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">input</span><span style="color:#24292E;">)=</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">//item,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">index</span><span style="color:#24292E;"> </span><span style="color:#032F62;">当前项</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">//input</span><span style="color:#24292E;"> </span><span style="color:#032F62;">当前set实例</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">console.log(item,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">index</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">	})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	for(</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">of</span><span style="color:#24292E;"> </span><span style="color:#032F62;">set.keys</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">//key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">是val</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	for(</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">value</span><span style="color:#24292E;"> </span><span style="color:#032F62;">of</span><span style="color:#24292E;"> </span><span style="color:#032F62;">set.values</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">//value</span><span style="color:#24292E;"> </span><span style="color:#032F62;">是val</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	for(</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">of</span><span style="color:#24292E;"> </span><span style="color:#032F62;">set.entries</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">//key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">是val</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><h3 id="set使用场景" tabindex="-1">set使用场景 <a class="header-anchor" href="#set使用场景" aria-label="Permalink to &quot;set使用场景&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#B392F0;">//数组去重</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">arr1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> [1, </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">9</span><span style="color:#9ECBFF;">]</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">arr2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> [2, </span><span style="color:#79B8FF;">4</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#9ECBFF;">]</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//并集</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">arg,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">arg2</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> [...new </span><span style="color:#9ECBFF;">Set</span><span style="color:#E1E4E8;">([...arg, ...arg2])</span><span style="color:#9ECBFF;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//交集</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">same</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">arg,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">arg2</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">arr.filter</span><span style="color:#E1E4E8;">(item</span><span style="color:#F97583;">=&gt;</span><span style="color:#9ECBFF;">arg2.includes</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">item</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//差集</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">并集</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">交集</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">diff</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">arg,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">arg2</span><span style="color:#E1E4E8;">)  {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">arg,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">arg2</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">.filter</span><span style="color:#E1E4E8;">(item</span><span style="color:#F97583;">=&gt;</span><span style="color:#9ECBFF;">!same</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">arg,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">aeg2</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">.includes</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">item</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#6F42C1;">//数组去重</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arr1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> [1, </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">9</span><span style="color:#032F62;">]</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arr2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> [2, </span><span style="color:#005CC5;">4</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#032F62;">]</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//并集</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">arg,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arg2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [...new </span><span style="color:#032F62;">Set</span><span style="color:#24292E;">([...arg, ...arg2])</span><span style="color:#032F62;">]</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//交集</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">same</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">arg,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arg2</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arr.filter</span><span style="color:#24292E;">(item</span><span style="color:#D73A49;">=&gt;</span><span style="color:#032F62;">arg2.includes</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">item</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//差集</span><span style="color:#24292E;">   </span><span style="color:#032F62;">并集</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">交集</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">diff</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">arg,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arg2</span><span style="color:#24292E;">)  {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">arg,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arg2</span><span style="color:#24292E;">)</span><span style="color:#032F62;">.filter</span><span style="color:#24292E;">(item</span><span style="color:#D73A49;">=&gt;</span><span style="color:#032F62;">!same</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">arg,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">aeg2</span><span style="color:#24292E;">)</span><span style="color:#032F62;">.includes</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">item</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><h3 id="map" tabindex="-1">Map <a class="header-anchor" href="#map" aria-label="Permalink to &quot;Map&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">//构造函数方式创建一个Map实例</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//参数是一个数组,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">数组的每一项也是一个数组,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">有两项key,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">value</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//属性名不可以重复</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">map</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Map</span><span style="color:#E1E4E8;">([[key, val], [] ])</span></span>
<span class="line"><span style="color:#E1E4E8;">	let map </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> new Map([ [], [] ])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	//一个对象属性名必须是一个字符串, 如果写的不是字符串也默认转化为字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">	//Map实例的 可以是任意数字类型</span></span>
<span class="line"><span style="color:#E1E4E8;">	//size: 键值对的个数</span></span>
<span class="line"><span style="color:#E1E4E8;">	let map </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> new Map([[</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;snuuy&#39;</span><span style="color:#E1E4E8;">], [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;money&#39;</span><span style="color:#E1E4E8;">], [[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">], [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]]]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	//get(key) 获取value</span></span>
<span class="line"><span style="color:#E1E4E8;">	map.get(</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">); //snuuy</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	//set(ke, vale); 之前有key, 会修改之前的value; 没有返回新的实例(可以链式写法)</span></span>
<span class="line"><span style="color:#E1E4E8;">	map.set(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	//has(key); 判断key有没有对应的value; 返回true/</span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">	map.has(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	//delete(key); 删除实例中的属性; 返回值true/</span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">	map.delete(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	//clear 清空 没有返回值 </span></span>
<span class="line"><span style="color:#E1E4E8;">	map.clear();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	//forEach keys values entries 遍历方法</span></span>
<span class="line"><span style="color:#E1E4E8;">	map.forEach((val, key, input)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		console.log(val, key, input);</span></span>
<span class="line"><span style="color:#E1E4E8;">	})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	for(var key </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> map.keys()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		console.log(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	for(var value </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> map.values()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		console.log(value);</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	for(var [key, val] </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> map.entries()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		console.log(key, val);</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	//</span><span style="color:#F97583;">???</span><span style="color:#E1E4E8;">数组变成Map实例</span></span>
<span class="line"><span style="color:#E1E4E8;">	var arr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [...];</span></span>
<span class="line"><span style="color:#E1E4E8;">	let map </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> new Map();</span></span>
<span class="line"><span style="color:#E1E4E8;">	for(var [key, val] of arr) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		map.set(key, val);</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">//构造函数方式创建一个Map实例</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//参数是一个数组,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">数组的每一项也是一个数组,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">有两项key,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">value</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//属性名不可以重复</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">map</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Map</span><span style="color:#24292E;">([[key, val], [] ])</span></span>
<span class="line"><span style="color:#24292E;">	let map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> new Map([ [], [] ])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	//一个对象属性名必须是一个字符串, 如果写的不是字符串也默认转化为字符串</span></span>
<span class="line"><span style="color:#24292E;">	//Map实例的 可以是任意数字类型</span></span>
<span class="line"><span style="color:#24292E;">	//size: 键值对的个数</span></span>
<span class="line"><span style="color:#24292E;">	let map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> new Map([[</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;snuuy&#39;</span><span style="color:#24292E;">], [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;money&#39;</span><span style="color:#24292E;">], [[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">], [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]]]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	//get(key) 获取value</span></span>
<span class="line"><span style="color:#24292E;">	map.get(</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">); //snuuy</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	//set(ke, vale); 之前有key, 会修改之前的value; 没有返回新的实例(可以链式写法)</span></span>
<span class="line"><span style="color:#24292E;">	map.set(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	//has(key); 判断key有没有对应的value; 返回true/</span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">	map.has(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	//delete(key); 删除实例中的属性; 返回值true/</span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">	map.delete(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	//clear 清空 没有返回值 </span></span>
<span class="line"><span style="color:#24292E;">	map.clear();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	//forEach keys values entries 遍历方法</span></span>
<span class="line"><span style="color:#24292E;">	map.forEach((val, key, input)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		console.log(val, key, input);</span></span>
<span class="line"><span style="color:#24292E;">	})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	for(var key </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> map.keys()) {</span></span>
<span class="line"><span style="color:#24292E;">		console.log(key);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	for(var value </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> map.values()) {</span></span>
<span class="line"><span style="color:#24292E;">		console.log(value);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	for(var [key, val] </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> map.entries()) {</span></span>
<span class="line"><span style="color:#24292E;">		console.log(key, val);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	//</span><span style="color:#D73A49;">???</span><span style="color:#24292E;">数组变成Map实例</span></span>
<span class="line"><span style="color:#24292E;">	var arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [...];</span></span>
<span class="line"><span style="color:#24292E;">	let map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> new Map();</span></span>
<span class="line"><span style="color:#24292E;">	for(var [key, val] of arr) {</span></span>
<span class="line"><span style="color:#24292E;">		map.set(key, val);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><h3 id="proxy" tabindex="-1">Proxy <a class="header-anchor" href="#proxy" aria-label="Permalink to &quot;Proxy&quot;">​</a></h3><p>对象默认操作拦截</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">//new</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Proxy</span><span style="color:#E1E4E8;">({参数1:目标对象}, {参数2:拦截的方法}); </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">obj</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{name:&#39;sunny&#39;}</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//让proxy代理了</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">obj</span><span style="color:#E1E4E8;">; </span><span style="color:#B392F0;">需要通过proxy</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">操作代理的obj</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">proxy</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Proxy</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">obj,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">//get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">只要是获取,</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">例如：proxy.name</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">就会触发get</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">get(target,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">proxy</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">{</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">target:目标对象</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key：属性名</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">proxty：当前实例</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">console.log(arguments</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">//return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;cherry&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">//return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">什么,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">就获取什么,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">或者就是undefined</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">target[key]</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	});</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(proxy.name</span><span style="color:#E1E4E8;">);</span><span style="color:#B392F0;">//sunny</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">proxy</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Proxy</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">obj,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">get(target,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">propKey,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">receiver</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">target[propKey]</span></span>
<span class="line"><span style="color:#E1E4E8;">		},</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">set</span><span style="color:#E1E4E8;">(target, </span><span style="color:#9ECBFF;">propKey,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">value,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">receiver</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">target[propKey]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">value</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">		},</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">has(target,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">propKey</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">			if(</span><span style="color:#B392F0;">propKey.startsWith(</span><span style="color:#B392F0;">&#39;_&#39;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">propKey</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">target</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">		},</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}) </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">proxy.name</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;cherry&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">consoel.log(obj</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(</span><span style="color:#B392F0;">&#39;name&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">proxy</span><span style="color:#E1E4E8;">);</span><span style="color:#B392F0;">//true</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(</span><span style="color:#B392F0;">&#39;__proto__&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">proxy</span><span style="color:#E1E4E8;">);</span><span style="color:#B392F0;">//false</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{name:&#39;sunny&#39;}</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">proxy</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Proxy</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">fn,</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">apply(target,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">object,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">//函数直接执行</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">call</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">apply</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">//args</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">函数执行的参数</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">//object</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">给函数修改this</span></span>
<span class="line"><span style="color:#E1E4E8;">			if(</span><span style="color:#B392F0;">object</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#B392F0;">object.fn</span><span style="color:#E1E4E8;">=target;</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#B392F0;">object.fn(...args</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">object.fn</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">			}else{</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#B392F0;">target(...args</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">proxy</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">//new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Proxy</span><span style="color:#24292E;">({参数1:目标对象}, {参数2:拦截的方法}); </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">obj</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{name:&#39;sunny&#39;}</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//让proxy代理了</span><span style="color:#24292E;"> </span><span style="color:#032F62;">obj</span><span style="color:#24292E;">; </span><span style="color:#6F42C1;">需要通过proxy</span><span style="color:#24292E;"> </span><span style="color:#032F62;">操作代理的obj</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">proxy</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Proxy</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">obj,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">//get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">只要是获取,</span><span style="color:#24292E;">  </span><span style="color:#032F62;">例如：proxy.name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">就会触发get</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">get(target,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">proxy</span><span style="color:#24292E;">) </span><span style="color:#032F62;">{</span><span style="color:#24292E;"> </span><span style="color:#032F62;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">target:目标对象</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key：属性名</span><span style="color:#24292E;"> </span><span style="color:#032F62;">proxty：当前实例</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">console.log(arguments</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">//return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;cherry&#39;</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">//return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">什么,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">就获取什么,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">或者就是undefined</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">target[key]</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	});</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(proxy.name</span><span style="color:#24292E;">);</span><span style="color:#6F42C1;">//sunny</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">proxy</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Proxy</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">obj,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">get(target,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">propKey,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">receiver</span><span style="color:#24292E;">) </span><span style="color:#032F62;">{</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">target[propKey]</span></span>
<span class="line"><span style="color:#24292E;">		},</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">set</span><span style="color:#24292E;">(target, </span><span style="color:#032F62;">propKey,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">value,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">receiver</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">target[propKey]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">value</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">		},</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">has(target,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">propKey</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			if(</span><span style="color:#6F42C1;">propKey.startsWith(</span><span style="color:#6F42C1;">&#39;_&#39;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">propKey</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#032F62;">target</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		},</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}) </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">proxy.name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;cherry&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">consoel.log(obj</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(</span><span style="color:#6F42C1;">&#39;name&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#032F62;">proxy</span><span style="color:#24292E;">);</span><span style="color:#6F42C1;">//true</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(</span><span style="color:#6F42C1;">&#39;__proto__&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#032F62;">proxy</span><span style="color:#24292E;">);</span><span style="color:#6F42C1;">//false</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{name:&#39;sunny&#39;}</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">proxy</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Proxy</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">fn,</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">apply(target,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">object,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">args</span><span style="color:#24292E;">) </span><span style="color:#032F62;">{</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">//函数直接执行</span><span style="color:#24292E;"> </span><span style="color:#032F62;">call</span><span style="color:#24292E;"> </span><span style="color:#032F62;">apply</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">//args</span><span style="color:#24292E;"> </span><span style="color:#032F62;">函数执行的参数</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">//object</span><span style="color:#24292E;"> </span><span style="color:#032F62;">给函数修改this</span></span>
<span class="line"><span style="color:#24292E;">			if(</span><span style="color:#6F42C1;">object</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6F42C1;">object.fn</span><span style="color:#24292E;">=target;</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6F42C1;">object.fn(...args</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;"> </span><span style="color:#032F62;">object.fn</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">			}else{</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6F42C1;">target(...args</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">proxy</span><span style="color:#24292E;">();</span></span></code></pre></div><h3 id="class" tabindex="-1">class <a class="header-anchor" href="#class" aria-label="Permalink to &quot;class&quot;">​</a></h3><p>class中的constructor</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Fn{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">constructor(x</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">//this:当前实例</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">this.x</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">x</span><span style="color:#E1E4E8;">; </span><span style="color:#B392F0;">//增加私有属性</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">//return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">的是基本数据类型对实例没有影响,</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">//如果是引用数据类型</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">会改变实例</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Fn</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">10</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">--&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">x:10</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Fn</span><span style="color:#E1E4E8;">();  </span><span style="color:#B392F0;">类必须使用new执行,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">不可以作为普通函数执行</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">typeof</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Fn</span><span style="color:#E1E4E8;">; </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;function&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//class的name问题</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Fn</span><span style="color:#E1E4E8;">()</span><span style="color:#9ECBFF;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">constructor</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">console.log(Fn.name</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//Fn</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">getFn</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">console.log(Fn.name</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//fn</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">/*</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Fn1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Fn</span><span style="color:#E1E4E8;">()</span><span style="color:#9ECBFF;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">//Fn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">只能在类里面使用</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">constructor</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">console.log(Fn.name</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//Fn</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">--</span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;">就近原则</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">*/</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Fn</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">class</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Fn{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">constructor(x</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">//this:当前实例</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">this.x</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">x</span><span style="color:#24292E;">; </span><span style="color:#6F42C1;">//增加私有属性</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">//return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">的是基本数据类型对实例没有影响,</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">//如果是引用数据类型</span><span style="color:#24292E;"> </span><span style="color:#032F62;">会改变实例</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">fn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Fn</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">10</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">--&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{</span><span style="color:#24292E;"> </span><span style="color:#032F62;">x:10</span><span style="color:#24292E;"> </span><span style="color:#032F62;">}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Fn</span><span style="color:#24292E;">();  </span><span style="color:#6F42C1;">类必须使用new执行,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">不可以作为普通函数执行</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">typeof</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Fn</span><span style="color:#24292E;">; </span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;function&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//class的name问题</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">class</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Fn</span><span style="color:#24292E;">()</span><span style="color:#032F62;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">constructor</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">console.log(Fn.name</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//Fn</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">getFn</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">console.log(Fn.name</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//fn</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">/*</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Fn1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">class</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Fn</span><span style="color:#24292E;">()</span><span style="color:#032F62;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">//Fn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">只能在类里面使用</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">constructor</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">console.log(Fn.name</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//Fn</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">--</span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">就近原则</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">*/</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">fn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Fn</span><span style="color:#24292E;">();</span></span></code></pre></div><p>class中的执行变量</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Person{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">constructor(name</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">this.name</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">name</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">person</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Person</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">&#39;sunny&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//采用class表达式让类执行</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">es6中class</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">和</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">一样没有变量提升</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">person</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Class{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">constructor(name</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">console.log(name</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}(</span><span style="color:#B392F0;">&#39;sunny&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">class</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Person{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">constructor(name</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">this.name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">name</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">person</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Person</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">&#39;sunny&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//采用class表达式让类执行</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">es6中class</span><span style="color:#24292E;"> </span><span style="color:#032F62;">和</span><span style="color:#24292E;"> </span><span style="color:#032F62;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">const</span><span style="color:#24292E;"> </span><span style="color:#032F62;">一样没有变量提升</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">person</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Class{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">constructor(name</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">console.log(name</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}(</span><span style="color:#6F42C1;">&#39;sunny&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>class静态方法</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">//类就相当于原型,</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//写在原型上的方法都被实例继承</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//static关键字不会被实例继承</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">可以被子类继承</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Person</span><span style="color:#E1E4E8;">() </span><span style="color:#9ECBFF;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">constructor</span><span style="color:#E1E4E8;">() {}</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">console.log(</span><span style="color:#B392F0;">&#39;sunny&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">getAge</span><span style="color:#E1E4E8;">() </span><span style="color:#9ECBFF;">{</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">//静态方法</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">console.log(</span><span style="color:#B392F0;">&#39;cherry&#39;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Son</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Person{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">getPerson</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">super.getAge</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">person</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Person</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">person.getName</span><span style="color:#E1E4E8;">(); </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sunny</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">person.getAge</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">son</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Son</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">son.getPerson</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//子类继承父类</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">子类中没有this</span><span style="color:#E1E4E8;">; </span><span style="color:#B392F0;">super执行完之后才会有this</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">A{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">constructor(x</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">//super</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">父类的constructor</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">this.x</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">x</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">getX</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">console.log(this.x</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">getY</span><span style="color:#E1E4E8;">() {}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">B</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">A{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">constructor(x</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">//super</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">执行不能写this</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">//super就是父类的constructor</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">super(x</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">		}	</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">getA</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">//super</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">指向父类的原型</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">super.getX</span><span style="color:#E1E4E8;">() {}</span></span>
<span class="line"><span style="color:#E1E4E8;">		}	</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">//static</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">父类的静态方法也可以继承</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">getY</span><span style="color:#E1E4E8;">() </span><span style="color:#9ECBFF;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">//super</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">指向父类本身</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">super.getY</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">A</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">10</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> 	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">b</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">B</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">100</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">//类就相当于原型,</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//写在原型上的方法都被实例继承</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//static关键字不会被实例继承</span><span style="color:#24292E;"> </span><span style="color:#032F62;">可以被子类继承</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">class</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Person</span><span style="color:#24292E;">() </span><span style="color:#032F62;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">constructor</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">console.log(</span><span style="color:#6F42C1;">&#39;sunny&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">static</span><span style="color:#24292E;"> </span><span style="color:#032F62;">getAge</span><span style="color:#24292E;">() </span><span style="color:#032F62;">{</span><span style="color:#24292E;"> </span><span style="color:#032F62;">//静态方法</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">console.log(</span><span style="color:#6F42C1;">&#39;cherry&#39;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">class</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Son</span><span style="color:#24292E;"> </span><span style="color:#032F62;">extends</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Person{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">getPerson</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">super.getAge</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">person</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Person</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">person.getName</span><span style="color:#24292E;">(); </span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sunny</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">person.getAge</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">son</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Son</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">son.getPerson</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//子类继承父类</span><span style="color:#24292E;"> </span><span style="color:#032F62;">子类中没有this</span><span style="color:#24292E;">; </span><span style="color:#6F42C1;">super执行完之后才会有this</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">class</span><span style="color:#24292E;"> </span><span style="color:#032F62;">A{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">constructor(x</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">//super</span><span style="color:#24292E;"> </span><span style="color:#032F62;">父类的constructor</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">this.x</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">x</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">getX</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">console.log(this.x</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">getY</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">class</span><span style="color:#24292E;"> </span><span style="color:#032F62;">B</span><span style="color:#24292E;"> </span><span style="color:#032F62;">extends</span><span style="color:#24292E;"> </span><span style="color:#032F62;">A{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">constructor(x</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">//super</span><span style="color:#24292E;"> </span><span style="color:#032F62;">执行不能写this</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">//super就是父类的constructor</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">super(x</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">		}	</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">getA</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">//super</span><span style="color:#24292E;"> </span><span style="color:#032F62;">指向父类的原型</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">super.getX</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#24292E;">		}	</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">//static</span><span style="color:#24292E;"> </span><span style="color:#032F62;">父类的静态方法也可以继承</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">static</span><span style="color:#24292E;"> </span><span style="color:#032F62;">getY</span><span style="color:#24292E;">() </span><span style="color:#032F62;">{</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">//super</span><span style="color:#24292E;"> </span><span style="color:#032F62;">指向父类本身</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">super.getY</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">A</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> 	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">b</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">B</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">100</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="promise" tabindex="-1">promise <a class="header-anchor" href="#promise" aria-label="Permalink to &quot;promise&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">//执行顺序：先执行new</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Promise中的函数</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">队列中同步代码</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">then中的回调函数</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pro</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Promise</span><span style="color:#E1E4E8;">((resolve</span><span style="color:#F97583;">,</span><span style="color:#E1E4E8;"> reject)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		//resolve </span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#9ECBFF;">//reject</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">//resolve</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">和</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">reject</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">只能执行一个</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">console.log(</span><span style="color:#B392F0;">&#39;promise&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">resolve(</span><span style="color:#B392F0;">&#39;success&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">reject(</span><span style="color:#B392F0;">&#39;error&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	})</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//then函数异步执行</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">pro.then((res</span><span style="color:#E1E4E8;">)=</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">//resolve</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">成功的回调</span></span>
<span class="line"><span style="color:#E1E4E8;">	},(</span><span style="color:#B392F0;">e</span><span style="color:#E1E4E8;">)=</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">//失败的回调</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">console.log(e</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//catch捕获错误异常</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">如果new</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">promise中有错误被捕获</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//如果then中回调有错误,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">也会被捕获</span><span style="color:#E1E4E8;">; </span><span style="color:#B392F0;">一般最后添加catch</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">不会一直向下then</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.dir(promise</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//all</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//Promise.all([每一项都是Promise,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">如果不是默认转化为Promise]</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">一旦发现有一项是错误</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">就会走失败</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//每一项都是成功</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">才会走成功回调</span><span style="color:#E1E4E8;">; </span><span style="color:#B392F0;">默认将每一项的参数放在一个数组中,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">传给回调函数</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pro</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Promise</span><span style="color:#E1E4E8;">((resolve</span><span style="color:#F97583;">,</span><span style="color:#E1E4E8;"> reject)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		resolve(&#39;ok&#39;);</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">}</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pro1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Promise</span><span style="color:#E1E4E8;">((resolve</span><span style="color:#F97583;">,</span><span style="color:#E1E4E8;"> reject)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		reject(&#39;error&#39;);</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">}</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pro2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Promise</span><span style="color:#E1E4E8;">((resolve</span><span style="color:#F97583;">,</span><span style="color:#E1E4E8;"> reject)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		resolve(&#39;ok&#39;);</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">}</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">proAll</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Promise.all</span><span style="color:#E1E4E8;">([pro, pro1, pro2]);</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">console.log(proAll</span><span style="color:#E1E4E8;">);</span><span style="color:#B392F0;">//----</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">proAll.then((res</span><span style="color:#E1E4E8;">)=</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">console.log(res</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//[</span><span style="color:#B392F0;">&#39;ok&#39;</span><span style="color:#B392F0;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;ok&#39;]</span></span>
<span class="line"><span style="color:#E1E4E8;">	}, catch(</span><span style="color:#B392F0;">e</span><span style="color:#E1E4E8;">)=</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">console.log(e</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	})	</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//race</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//只要有一个状态改变,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">此时当前实例的状态就改变</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">Promise.race([pro,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pro1,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pro2]</span><span style="color:#E1E4E8;">).then((res)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		console.log(res);</span></span>
<span class="line"><span style="color:#E1E4E8;">	}, catch(</span><span style="color:#B392F0;">e</span><span style="color:#E1E4E8;">)=</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">console.log(e</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">//执行顺序：先执行new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Promise中的函数</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">队列中同步代码</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">then中的回调函数</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pro</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Promise</span><span style="color:#24292E;">((resolve</span><span style="color:#D73A49;">,</span><span style="color:#24292E;"> reject)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		//resolve </span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#032F62;">//reject</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">//resolve</span><span style="color:#24292E;"> </span><span style="color:#032F62;">和</span><span style="color:#24292E;"> </span><span style="color:#032F62;">reject</span><span style="color:#24292E;"> </span><span style="color:#032F62;">只能执行一个</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">console.log(</span><span style="color:#6F42C1;">&#39;promise&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">resolve(</span><span style="color:#6F42C1;">&#39;success&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">reject(</span><span style="color:#6F42C1;">&#39;error&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	})</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//then函数异步执行</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">pro.then((res</span><span style="color:#24292E;">)=</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">//resolve</span><span style="color:#24292E;"> </span><span style="color:#032F62;">成功的回调</span></span>
<span class="line"><span style="color:#24292E;">	},(</span><span style="color:#6F42C1;">e</span><span style="color:#24292E;">)=</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">//失败的回调</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">console.log(e</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//catch捕获错误异常</span><span style="color:#24292E;"> </span><span style="color:#032F62;">如果new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">promise中有错误被捕获</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//如果then中回调有错误,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">也会被捕获</span><span style="color:#24292E;">; </span><span style="color:#6F42C1;">一般最后添加catch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">不会一直向下then</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.dir(promise</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//all</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//Promise.all([每一项都是Promise,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">如果不是默认转化为Promise]</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">一旦发现有一项是错误</span><span style="color:#24292E;"> </span><span style="color:#032F62;">就会走失败</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//每一项都是成功</span><span style="color:#24292E;"> </span><span style="color:#032F62;">才会走成功回调</span><span style="color:#24292E;">; </span><span style="color:#6F42C1;">默认将每一项的参数放在一个数组中,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">传给回调函数</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pro</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Promise</span><span style="color:#24292E;">((resolve</span><span style="color:#D73A49;">,</span><span style="color:#24292E;"> reject)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		resolve(&#39;ok&#39;);</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">}</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pro1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Promise</span><span style="color:#24292E;">((resolve</span><span style="color:#D73A49;">,</span><span style="color:#24292E;"> reject)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		reject(&#39;error&#39;);</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">}</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pro2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Promise</span><span style="color:#24292E;">((resolve</span><span style="color:#D73A49;">,</span><span style="color:#24292E;"> reject)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		resolve(&#39;ok&#39;);</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">}</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">proAll</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Promise.all</span><span style="color:#24292E;">([pro, pro1, pro2]);</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">console.log(proAll</span><span style="color:#24292E;">);</span><span style="color:#6F42C1;">//----</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">proAll.then((res</span><span style="color:#24292E;">)=</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">console.log(res</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//[</span><span style="color:#6F42C1;">&#39;ok&#39;</span><span style="color:#6F42C1;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;ok&#39;]</span></span>
<span class="line"><span style="color:#24292E;">	}, catch(</span><span style="color:#6F42C1;">e</span><span style="color:#24292E;">)=</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">console.log(e</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	})	</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//race</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//只要有一个状态改变,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">此时当前实例的状态就改变</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">Promise.race([pro,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pro1,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pro2]</span><span style="color:#24292E;">).then((res)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		console.log(res);</span></span>
<span class="line"><span style="color:#24292E;">	}, catch(</span><span style="color:#6F42C1;">e</span><span style="color:#24292E;">)=</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">console.log(e</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	})</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">//实现promiseAll</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PromiseAll</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">promises</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Promise</span><span style="color:#E1E4E8;">((resolve</span><span style="color:#F97583;">,</span><span style="color:#E1E4E8;"> reject) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			let index = 0;</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#9ECBFF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">res</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Array</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">promises.length</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">			for(</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; </span><span style="color:#B392F0;">i&lt;promises.length</span><span style="color:#E1E4E8;">;</span><span style="color:#B392F0;">i++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#B392F0;">promises[i].then(val</span><span style="color:#E1E4E8;"> =</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">					</span><span style="color:#B392F0;">index</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">					</span><span style="color:#B392F0;">res[i]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">val</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">					if(</span><span style="color:#B392F0;">index</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">promises.length</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">						</span><span style="color:#B392F0;">resolve(res</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">					}</span></span>
<span class="line"><span style="color:#E1E4E8;">				}, error =</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">					</span><span style="color:#B392F0;">reject(error</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">					</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">				})</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">		})</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">p1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Promise</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;"> =</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">&#39;p1&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">p2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Promise</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;"> =</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">&#39;p2&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">//let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">p3</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Promise.reject</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">&#39;p3&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">//实现promiseAll</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PromiseAll</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">promises</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Promise</span><span style="color:#24292E;">((resolve</span><span style="color:#D73A49;">,</span><span style="color:#24292E;"> reject) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			let index = 0;</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#032F62;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">res</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Array</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">promises.length</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">			for(</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">i</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; </span><span style="color:#6F42C1;">i&lt;promises.length</span><span style="color:#24292E;">;</span><span style="color:#6F42C1;">i++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6F42C1;">promises[i].then(val</span><span style="color:#24292E;"> =</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{</span></span>
<span class="line"><span style="color:#24292E;">					</span><span style="color:#6F42C1;">index</span><span style="color:#24292E;"> </span><span style="color:#032F62;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">					</span><span style="color:#6F42C1;">res[i]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">val</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">					if(</span><span style="color:#6F42C1;">index</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">promises.length</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">						</span><span style="color:#6F42C1;">resolve(res</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">					}</span></span>
<span class="line"><span style="color:#24292E;">				}, error =</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">					</span><span style="color:#6F42C1;">reject(error</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">					</span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">				})</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		})</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">p1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Promise</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;"> =</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">resolve</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">&#39;p1&#39;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">p2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Promise</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;"> =</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">resolve</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">&#39;p2&#39;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">p3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Promise.reject</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">&#39;p3&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="async" tabindex="-1">async <a class="header-anchor" href="#async" aria-label="Permalink to &quot;async&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">//async</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">默认返回一个Promise对象</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">fn</span><span style="color:#E1E4E8;">() </span><span style="color:#9ECBFF;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">//return出的内容就是成功回调函数</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">//有错误就会被catch捕获到</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;sunny&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">().then((res)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		console.log(res); //sunny</span></span>
<span class="line"><span style="color:#E1E4E8;">	}, catch(</span><span style="color:#B392F0;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">console.log(e</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	})</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">p</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Promise</span><span style="color:#E1E4E8;">((resolve</span><span style="color:#F97583;">,</span><span style="color:#E1E4E8;"> reject)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		resolve(&#39;sunny&#39;);</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">}</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">foo</span><span style="color:#E1E4E8;">() </span><span style="color:#9ECBFF;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">//await</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">后面是一个promise实例,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">如果不是也会转化为promise</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">//直接让promise实例的回调执行,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">返回执行时的参数</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">//await</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">不用通过then就可以拿到resolve或reject参数</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">console.log(await</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">p</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sunny</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">//先将await</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">后面的异步执行完成后,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">再执行后面的代码</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">p</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">console.log(a</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">().then((res)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		console.log(res);</span></span>
<span class="line"><span style="color:#E1E4E8;">	}, catch(</span><span style="color:#B392F0;">e</span><span style="color:#E1E4E8;">)=</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">consoel.log(e</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">//async</span><span style="color:#24292E;"> </span><span style="color:#032F62;">默认返回一个Promise对象</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">async</span><span style="color:#24292E;"> </span><span style="color:#032F62;">function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">fn</span><span style="color:#24292E;">() </span><span style="color:#032F62;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">//return出的内容就是成功回调函数</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">//有错误就会被catch捕获到</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;sunny&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">().then((res)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		console.log(res); //sunny</span></span>
<span class="line"><span style="color:#24292E;">	}, catch(</span><span style="color:#6F42C1;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">console.log(e</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	})</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Promise</span><span style="color:#24292E;">((resolve</span><span style="color:#D73A49;">,</span><span style="color:#24292E;"> reject)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		resolve(&#39;sunny&#39;);</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">}</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">async</span><span style="color:#24292E;"> </span><span style="color:#032F62;">function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">foo</span><span style="color:#24292E;">() </span><span style="color:#032F62;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">//await</span><span style="color:#24292E;"> </span><span style="color:#032F62;">后面是一个promise实例,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">如果不是也会转化为promise</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">//直接让promise实例的回调执行,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">返回执行时的参数</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">//await</span><span style="color:#24292E;"> </span><span style="color:#032F62;">不用通过then就可以拿到resolve或reject参数</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">console.log(await</span><span style="color:#24292E;"> </span><span style="color:#032F62;">p</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sunny</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">//先将await</span><span style="color:#24292E;"> </span><span style="color:#032F62;">后面的异步执行完成后,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">再执行后面的代码</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">await</span><span style="color:#24292E;"> </span><span style="color:#032F62;">p</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">console.log(a</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">().then((res)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		console.log(res);</span></span>
<span class="line"><span style="color:#24292E;">	}, catch(</span><span style="color:#6F42C1;">e</span><span style="color:#24292E;">)=</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">consoel.log(e</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	})</span></span></code></pre></div>`,50),e=[o];function t(c,r,E,y,F,i){return n(),a("div",null,e)}const g=s(p,[["render",t]]);export{B as __pageData,g as default};
