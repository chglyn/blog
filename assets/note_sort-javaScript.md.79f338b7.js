import{_ as s,o as t,c as e,Q as a}from"./chunks/framework.419948d5.js";const y=JSON.parse('{"title":"JavaScript sort","description":"远美网是一个vite与vitepress搭建的静态站点，记录着工作中有意义的事情，提供技术支持。","frontmatter":{"title":"JavaScript sort","editLink":true,"head":[["meta",{"name":"description","content":"远美网是一个vite与vitepress搭建的静态站点，记录着工作中有意义的事情，提供技术支持。"}],["meta",{"name":"keywords","content":"sort,sort排序,JavaScript,数组中的对象排序,排序"}]]},"headers":[],"relativePath":"note/sort-javaScript.md","filePath":"note/sort-javaScript.md"}'),o={name:"note/sort-javaScript.md"},n=a(`<h3 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h3><p>项目中学生答题结束，题干类型单选题和多选题混乱在一起呈现，需求想分开，单选题在前面，多选题在后面。</p><p>届时想到 sort 排序。</p><p>sort() 方法用于对数组的元素进行排序，并返回数组。默认排序顺序是根据字符串 UniCode 码。因为排序是按照字符串 UniCode 码的顺序进行排序的，所以首先应该把数组元素都转化成字符串（如有必要），以便进行比较。</p><p>用法：arrayObject.sort(sortby);</p><p>参数 sortby 可选，用来规定排序的顺序，但必须是函数。</p><h3 id="数组中对象某个值排序" tabindex="-1">数组中对象某个值排序 <a class="header-anchor" href="#数组中对象某个值排序" aria-label="Permalink to &quot;数组中对象某个值排序&quot;">​</a></h3><p>查看数据结构如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">items: [</span></span>
<span class="line"><span style="color:#e1e4e8;">	{pk_exam_use_question: &quot;586601&quot;, is_send: &quot;0&quot;, fk_question: &quot;11494&quot;, fk_exam: &quot;103&quot;, object_id: &quot;3690&quot;,…}</span></span>
<span class="line"><span style="color:#e1e4e8;">	{pk_exam_use_question: &quot;586608&quot;, is_send: &quot;0&quot;, fk_question: &quot;11496&quot;, fk_exam: &quot;103&quot;, object_id: &quot;3690&quot;,…}</span></span>
<span class="line"><span style="color:#e1e4e8;">	{pk_exam_use_question: &quot;586615&quot;, is_send: &quot;0&quot;, fk_question: &quot;333754&quot;, fk_exam: &quot;103&quot;,…}</span></span>
<span class="line"><span style="color:#e1e4e8;">	{pk_exam_use_question: &quot;586622&quot;, is_send: &quot;0&quot;, fk_question: &quot;333838&quot;, fk_exam: &quot;103&quot;,…}</span></span>
<span class="line"><span style="color:#e1e4e8;">	{pk_exam_use_question: &quot;586629&quot;, is_send: &quot;0&quot;, fk_question: &quot;332902&quot;, fk_exam: &quot;103&quot;,…}</span></span>
<span class="line"><span style="color:#e1e4e8;">	{pk_exam_use_question: &quot;586636&quot;, is_send: &quot;0&quot;, fk_question: &quot;332901&quot;, fk_exam: &quot;103&quot;,…}</span></span>
<span class="line"><span style="color:#e1e4e8;">	{pk_exam_use_question: &quot;586643&quot;, is_send: &quot;0&quot;, fk_question: &quot;333845&quot;, fk_exam: &quot;103&quot;,…}</span></span>
<span class="line"><span style="color:#e1e4e8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">items: [</span></span>
<span class="line"><span style="color:#24292e;">	{pk_exam_use_question: &quot;586601&quot;, is_send: &quot;0&quot;, fk_question: &quot;11494&quot;, fk_exam: &quot;103&quot;, object_id: &quot;3690&quot;,…}</span></span>
<span class="line"><span style="color:#24292e;">	{pk_exam_use_question: &quot;586608&quot;, is_send: &quot;0&quot;, fk_question: &quot;11496&quot;, fk_exam: &quot;103&quot;, object_id: &quot;3690&quot;,…}</span></span>
<span class="line"><span style="color:#24292e;">	{pk_exam_use_question: &quot;586615&quot;, is_send: &quot;0&quot;, fk_question: &quot;333754&quot;, fk_exam: &quot;103&quot;,…}</span></span>
<span class="line"><span style="color:#24292e;">	{pk_exam_use_question: &quot;586622&quot;, is_send: &quot;0&quot;, fk_question: &quot;333838&quot;, fk_exam: &quot;103&quot;,…}</span></span>
<span class="line"><span style="color:#24292e;">	{pk_exam_use_question: &quot;586629&quot;, is_send: &quot;0&quot;, fk_question: &quot;332902&quot;, fk_exam: &quot;103&quot;,…}</span></span>
<span class="line"><span style="color:#24292e;">	{pk_exam_use_question: &quot;586636&quot;, is_send: &quot;0&quot;, fk_question: &quot;332901&quot;, fk_exam: &quot;103&quot;,…}</span></span>
<span class="line"><span style="color:#24292e;">	{pk_exam_use_question: &quot;586643&quot;, is_send: &quot;0&quot;, fk_question: &quot;333845&quot;, fk_exam: &quot;103&quot;,…}</span></span>
<span class="line"><span style="color:#24292e;">]</span></span></code></pre></div><p>数组中每个对象都有一个试题类型 type 字段，使用 1，2 表示。</p><p>编写函数处理试题排序：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">sortExamType: function(type) {</span></span>
<span class="line"><span style="color:#e1e4e8;">		return function(x, y) {</span></span>
<span class="line"><span style="color:#e1e4e8;">			var v1 = x.type;</span></span>
<span class="line"><span style="color:#e1e4e8;">			var v2 = y.type;</span></span>
<span class="line"><span style="color:#e1e4e8;">			return v1 - v2;</span></span>
<span class="line"><span style="color:#e1e4e8;">		}</span></span>
<span class="line"><span style="color:#e1e4e8;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">sortExamType: function(type) {</span></span>
<span class="line"><span style="color:#24292e;">		return function(x, y) {</span></span>
<span class="line"><span style="color:#24292e;">			var v1 = x.type;</span></span>
<span class="line"><span style="color:#24292e;">			var v2 = y.type;</span></span>
<span class="line"><span style="color:#24292e;">			return v1 - v2;</span></span>
<span class="line"><span style="color:#24292e;">		}</span></span>
<span class="line"><span style="color:#24292e;">	}</span></span></code></pre></div><p>其中：</p><p>比较函数应该具有两个参数 a 和 b，其返回值如下：</p><p>若 a 小于 b，即 a - b 小于零，则返回一个小于零的值，数组将按照升序排列。</p><p>若 a 等于 b，则返回 0。</p><p>若 a 大于 b, 即 a - b 大于零，则返回一个大于零的值，数组将按照降序排列。</p><p>调用：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">list = list.sort(sortExamType(&#39;type&#39;))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">list = list.sort(sortExamType(&#39;type&#39;))</span></span></code></pre></div>`,19),p=[n];function u(l,i,q,c,r,_){return t(),e("div",null,p)}const k=s(o,[["render",u]]);export{y as __pageData,k as default};
